| package |
package := Package name: 'Jade Class Browser'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '0.071'.


package classNames
	add: #GsClass;
	add: #JadeMigrateClassDialog;
	yourself.

package methodNames
	add: #JadeServer -> #_addClass:toStream:;
	add: #JadeServer -> #_addClass:toStream:isVisible:fromDictionary:;
	add: #JadeServer -> #_stringForClassList:;
	add: #JadeServer -> #classOrganizer;
	add: #JadeServer -> #superclassesOf:isMeta:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Boolean\Dolphin Boolean Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models';
	add: 'GemStone Objects';
	add: 'GemStone Session';
	add: 'Jade UI Base';
	yourself).

package!

"Class Definitions"!

GsObject subclass: #GsClass
	instanceVariableNames: 'category dictionary parent children isVisible classHistory isTestCase'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeValueDialog subclass: #JadeMigrateClassDialog
	instanceVariableNames: 'copyMethodsPresenter recompileSubclassesPresenter migrateInstancesPresenter removeFromClassHistoryPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!JadeServer methodsFor!

_addClass: each toStream: stream 

	self
		_addClass: each 
		toStream: stream 
		isVisible: true
		fromDictionary: nil.
!

_addClass: aClass toStream: aStream isVisible: aBoolean fromDictionary: aDictionary
	"Private - 1. OOP; 2. key; 3. category; 4. dictionary name; 5. superclass OOP; 6. children; 7. Visible/Inherited; 8. Class History; 9. isTestCase"

	| testCaseClass history |
"1"	(self oopOf: aClass) printOn: aStream.
"2"	aStream tab; nextPutAll: (aDictionary  isNil ifTrue: [aClass name] ifFalse: [aDictionary keyAtValue: aClass ifAbsent: [aClass name]]); tab.
"3"	aClass category notNil ifTrue: [aStream nextPutAll: aClass category].
"4"	aStream tab; nextPutAll: (aDictionary isNil ifTrue: ['?'] ifFalse: [aDictionary name]).
"5"	aStream tab. (self oopOf: aClass superclass) printOn: aStream.
	aStream 
"6"		tab; "let client build children list"
"7"		tab; nextPut: (aBoolean ifTrue: [$V] ifFalse: [$I]);
		tab.
	(history := self historyOf: aClass) isNil ifTrue: [history := Array with: aClass].
"8"	(history indexOf: aClass) printOn: aStream.
	aStream nextPut: $/.
	history size printOn: aStream.
	aStream tab.
	testCaseClass := Globals
		at: #'TestCase'
		ifAbsent: [nil].
"9"	(testCaseClass notNil and: [aClass isSubclassOf: testCaseClass]) printOn: aStream.
	aStream lf.
!

_stringForClassList: aList

	| stream |
	stream := self _writeStreamOnString.
	aList do: [:each | 
		self 
			_addClass: each 
			toStream: stream.
	].
	^stream contents.
!

classOrganizer

	| org |
	^(org := classOrganizers at: 1) notNil
		ifTrue: [org]
		ifFalse: [classOrganizers at: 1 put: ClassOrganizer new]
!

superclassesOf: aClass isMeta: aBoolean

	| myClass list |
	myClass := aBoolean ifTrue: [aClass class] ifFalse: [aClass].
	list := myClass _allSuperList , (Array with: myClass).
	^self _encodeString: (self _stringForClassList: list).
! !
!JadeServer categoriesFor: #_addClass:toStream:!Classes!private! !
!JadeServer categoriesFor: #_addClass:toStream:isVisible:fromDictionary:!Classes!private! !
!JadeServer categoriesFor: #_stringForClassList:!Classes!private! !
!JadeServer categoriesFor: #classOrganizer!Classes!private! !
!JadeServer categoriesFor: #superclassesOf:isMeta:!Classes!public! !

"End of package definition"!

