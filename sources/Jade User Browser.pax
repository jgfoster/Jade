| package |
package := Package name: 'Jade User Browser'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '0.031'.


package classNames
	add: #AllUsersPresenter;
	add: #AllUsersShell;
	add: #GsGlobal;
	add: #GsSymbolDictionary;
	add: #GsUserProfile;
	add: #UserListPresenter;
	add: #UserProfileDetailsPresenter;
	add: #UserProfilePasswordPresenter;
	add: #UserProfilePresenter;
	add: #UserProfileSetPresenter;
	yourself.

package methodNames
	add: #JadeServer -> #addGroup:toUser:;
	add: #JadeServer -> #addPrivilege:toUser:;
	add: #JadeServer -> #allUsersPasswordLimits;
	add: #JadeServer -> #dictionaryListFor:;
	add: #JadeServer -> #groupListFor:;
	add: #JadeServer -> #newUser:;
	add: #JadeServer -> #privilegeListFor:;
	add: #JadeServer -> #removeGroup:fromUser:;
	add: #JadeServer -> #removePrivilege:fromUser:;
	add: #JadeServer -> #userList;
	add: #JadeServer32bit -> #_addUser:toStream:;
	add: #JadeServer64bit -> #_addUser:toStream:;
	add: #JadeTextDocument -> #jadeBrowseUsers;
	add: #JadeToolsToolBarPresenter -> #browseUsers;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Boolean\Dolphin Boolean Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Cards\Dolphin Card Containers';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Number\Dolphin Number Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models';
	add: 'GemStone Objects';
	add: 'GemStone Session';
	add: 'Jade UI Base';
	add: '..\Core\Contributions\Solutions Software\SSW EditableListView';
	yourself).

package!

"Class Definitions"!

GsObject subclass: #GsGlobal
	instanceVariableNames: 'gsClassName data'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #GsSymbolDictionary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #GsUserProfile
	instanceVariableNames: 'lastLoginTime remainingLogins isDisabled maxSessions language disabledReason lastPasswordChange isSpecial'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #AllUsersPresenter
	instanceVariableNames: 'userListPresenter userProfilePresenter passwordLimitsPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #UserListPresenter
	instanceVariableNames: 'userListPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #UserProfileDetailsPresenter
	instanceVariableNames: 'userIDPresenter maxLoginsPresenter languagePresenter lastLoginPresenter disabledReasonPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #UserProfilePasswordPresenter
	instanceVariableNames: 'whenPasswordChangedPresenter loginsRemainingPresenter isSpecialUserPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #UserProfilePresenter
	instanceVariableNames: 'user detailsPresenter passwordPresenter symbolListPresenter groupListPresenter privilegeListPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #UserProfileSetPresenter
	instanceVariableNames: 'disallowUsedPasswordsPresenter minPasswordSizePresenter maxPasswordSizePresenter maxRepeatingCharsPresenter maxConsecutiveCharsPresenter maxCharsOfSameTypePresenter staleAccountAgeLimitPresenter passwordAgeLimitPresenter passwordAgeWarningPresenter disallowedPasswordListPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeShell subclass: #AllUsersShell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!JadeServer methodsFor!

addGroup: aString toUser: aUserProfile

	aUserProfile addGroup: (self _decodeString: aString).
!

addPrivilege: aString toUser: aUserProfile

	aUserProfile addPrivilege: (self _decodeString: aString).
!

allUsersPasswordLimits

	| stream |
	stream := self _writeStreamOnString.
	AllUsers disallowUsedPasswords 	printOn: stream. stream tab.
	AllUsers minPasswordSize 		printOn: stream. stream tab.
	AllUsers maxPasswordSize 		printOn: stream. stream tab.
	AllUsers maxRepeatingChars 	printOn: stream. stream tab.
	AllUsers maxConsecutiveChars 	printOn: stream. stream tab.
	AllUsers maxCharsOfSameType 	printOn: stream. stream tab.
	AllUsers staleAccountAgeLimit 	printOn: stream. stream tab.
	AllUsers passwordAgeLimit 	printOn: stream. stream lf.
	AllUsers disallowedPasswords do: [:each | 
		stream nextPutAll: each; tab.
	].
	stream lf. 
	AllUsers passwordAgeWarning printOn: stream. stream lf.
	^self _encodeString: stream contents.
!

dictionaryListFor: aUserProfile

	| symbolList list stream |
	symbolList := aUserProfile symbolList.
	list := symbolList namesReport subStrings: Character lf.
	list := list reject: [:each | each isEmpty].
	list := list collect: [:each | each subStrings].
	stream := self _writeStreamOnString.
	list do: [:each | 
		(self oopOf: (symbolList at: (each at: 1) asNumber)) printOn: stream.
		stream tab; nextPutAll: (each at: 2); lf.
	].
	^self _encodeString: stream contents.
!

groupListFor: aUserProfile

	| allGroups myGroups stream |
	allGroups := AllGroups keys asSortedCollection.
	myGroups := aUserProfile groups.
	stream := self _writeStreamOnString.
	allGroups do: [:each | 
		stream nextPutAll: each; tab.
		(myGroups includes: each) printOn: stream.
		stream lf.
	].
	^self _encodeString: stream contents.
!

newUser: aString

	| userProfile stream |
	userProfile := UserProfile 
		newWithUserId: (self _decodeString: aString)
		password: 'swordfish'
		privileges: #()
		inGroups: #().
	stream := self _writeStreamOnString.
	self
		_addUser: userProfile 
		toStream: stream.
	^self _encodeString: stream contents.
!

privilegeListFor: aUserProfile

	| allPrivileges myPrivileges stream |
	allPrivileges := (aUserProfile class instVarAt: 6) at: #'PrivilegeNames'.
	myPrivileges := aUserProfile privileges.
	stream := self _writeStreamOnString.
	allPrivileges do: [:each | 
		stream nextPutAll: each; tab.
		(myPrivileges includes: each) printOn: stream.
		stream lf.
	].
	^self _encodeString: stream contents.
!

removeGroup: aString fromUser: aUserProfile

	aUserProfile removeGroup: (self _decodeString: aString).
!

removePrivilege: aString fromUser: aUserProfile

	aUserProfile deletePrivilege: (self _decodeString: aString).
!

userList

	| list me stream |
	list := (AllUsers asSortedCollection: [:a :b | a userId <= b userId]) asOrderedCollection.
	me := System myUserProfile.
	list
		remove: me;
		addFirst: me;
		yourself.
	stream := self _writeStreamOnString.
	list do: [:each | self _addUser: each toStream: stream].
	^self _encodeString: stream contents.
! !
!JadeServer categoriesFor: #addGroup:toUser:!public!UserProfile! !
!JadeServer categoriesFor: #addPrivilege:toUser:!public!UserProfile! !
!JadeServer categoriesFor: #allUsersPasswordLimits!public!UserProfile! !
!JadeServer categoriesFor: #dictionaryListFor:!public! !
!JadeServer categoriesFor: #groupListFor:!public!UserProfile! !
!JadeServer categoriesFor: #newUser:!public!UserProfile! !
!JadeServer categoriesFor: #privilegeListFor:!public!UserProfile! !
!JadeServer categoriesFor: #removeGroup:fromUser:!public!UserProfile! !
!JadeServer categoriesFor: #removePrivilege:fromUser:!public!UserProfile! !
!JadeServer categoriesFor: #userList!public!UserProfile! !

!JadeServer32bit methodsFor!

_addUser: aUserProfile toStream: aStream

	Exception
		category: nil
		number: nil
		do: [:ex :cat :num :args | aStream lf. ^self].
	super
		_addUser: aUserProfile 
		toStream: aStream.
! !
!JadeServer32bit categoriesFor: #_addUser:toStream:!private!UserProfile! !

!JadeServer64bit methodsFor!

_addUser: aUserProfile toStream: aStream

	[
		super
			_addUser: aUserProfile 
			toStream: aStream.
	] on: Error do: [:ex | 
		aStream lf.
		ex return.
	].
! !
!JadeServer64bit categoriesFor: #_addUser:toStream:!private!UserProfile! !

!JadeTextDocument methodsFor!

jadeBrowseUsers

	gciSession hasServer ifTrue: [
		^AllUsersShell showOnSession: gciSession.
	].
	MessageBox
		warning: 'Server initialization failed at login.'
		caption: 'Unable to Open Browser'.
! !
!JadeTextDocument categoriesFor: #jadeBrowseUsers!Jade!private! !

!JadeToolsToolBarPresenter methodsFor!

browseUsers

	AllUsersShell showOnSession: gciSession.
! !
!JadeToolsToolBarPresenter categoriesFor: #browseUsers!public! !

"End of package definition"!

