| package |
package := Package name: 'Rowan UI Base'.
package paxVersion: 1;
	basicComment: 'Rowan GUI tools built on Jade Smalltalk for Dolphin. '.

package imageStripperBytes: (ByteArray fromBase64String: 'IVNUQiA0IEYPEQAEAAAASmFkZUltYWdlU3RyaXBwZXIAAAAAAAAAAFIAAAAAAAAAmgAAAFIAAAAQ
AAAARG9scGhpbiBNVlAgQmFzZVIAAAAVAAAAUnVudGltZVNlc3Npb25NYW5hZ2Vy778lAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=').

package classNames
	add: #BrowserUpdate;
	add: #JadeiteBasicMethodListPresenter;
	add: #JadeiteFindClassDialog;
	add: #JadeiteMethodListBrowser;
	add: #JadeiteMethodListPresenter;
	add: #JadeiteMethodSourcePresenter;
	add: #JadeiteProjectsBrowserPresenter;
	add: #JadeiteProjectsSystemBrowser;
	add: #PackageMethodListPresenter;
	add: #Rowan;
	add: #RowanAnsweringService;
	add: #RowanBrowserService;
	add: #RowanClassCategoryUpdate;
	add: #RowanClassesUpdate;
	add: #RowanClassHierarchyUpdate;
	add: #RowanClassInfoUpdate;
	add: #RowanClassService;
	add: #RowanDebugger;
	add: #RowanDebuggerService;
	add: #RowanDebuggerStepPointError;
	add: #RowanDictionaryUpdate;
	add: #RowanFrameService;
	add: #RowanGlobalsUpdate;
	add: #RowanKeyValuePrompter;
	add: #RowanLoginShell;
	add: #RowanMethodListBrowser;
	add: #RowanMethodListPresenter;
	add: #RowanMethodSelectionPresenter;
	add: #RowanMethodService;
	add: #RowanMethodSourcePresenter;
	add: #RowanMethodsUpdate;
	add: #RowanMethodUpdate;
	add: #RowanPackagePresenter;
	add: #RowanPackageService;
	add: #RowanPackageShell;
	add: #RowanPackageUpdate;
	add: #RowanPatchBrowser;
	add: #RowanPresenter;
	add: #RowanProcessService;
	add: #RowanProjectListPresenter;
	add: #RowanProjectListShell;
	add: #RowanProjectService;
	add: #RowanProjectsUpdate;
	add: #RowanQueryService;
	add: #RowanSavePackageDialog;
	add: #RowanService;
	add: #RowanServiceTest;
	add: #RowanShell;
	add: #RowanSuperclassUpdate;
	add: #RowanSystemBrowser;
	add: #RowanSystemBrowserPresenter;
	add: #RowanTranscript;
	add: #RowanVariableService;
	yourself.

package methodNames
	add: #CodeSourcePresenter -> #browseSelectedClass;
	add: #CodeSourcePresenter -> #executeSelectionOrLine;
	add: #Collection -> #prepareForReplication;
	add: #GciSession -> #computeGemHost;
	add: #GciSession -> #computeStoneHost;
	add: #GciSession -> #hasServer;
	add: #GciSession -> #initializeServer;
	add: #GciSession -> #postLoginAs:useSocket:;
	add: #GciSession -> #titleBarFor:;
	add: #GciSession -> #verifyRowanLoaded;
	add: #GsError -> #debugError;
	add: #GsMethod -> #methodService;
	add: #JadeAutoTextPresenter3 -> #defaultMethod;
	add: #JadeAutoTextPresenter3 -> #setDefaultMethod;
	add: #JadeDebugger -> #updateCaption;
	add: #JadeErrorShell -> #doCopy;
	add: #JadeErrorShell -> #onViewOpened;
	add: #JadeFindClassDialog -> #initializeAvailable;
	add: #JadeImageStripper -> #closeLoginShells;
	add: #JadeImageStripper -> #createVersionResource;
	add: #JadeImageStripper -> #requiredClasses;
	add: #JadeImageStripper -> #requiredPackageNames;
	add: #JadeInspector -> #displayObject;
	add: #JadeInspector -> #onViewOpened;
	add: #JadeInspector -> #setDocumentPresenterLabel;
	add: #JadeInspector -> #setLastGsShape:;
	add: #JadeInspector -> #shellName;
	add: #JadeInspector -> #shellNameExtraInfo;
	add: #JadeInspector -> #updateCaption;
	add: #JadeLoginShell -> #aboutJadeite;
	add: #JadeNavigationInspector -> #setNewInspectedObject;
	add: #JadePresenter -> #issueCommand:;
	add: #JadePresenterA -> #basicCloneProject:root:;
	add: #JadePresenterA -> #basicUpdateServices:;
	add: #JadePresenterA -> #browseImplementorsOf:;
	add: #JadePresenterA -> #browseSendersOf:;
	add: #JadePresenterA -> #clearBreakPointAt:in:;
	add: #JadePresenterA -> #cloneProject;
	add: #JadePresenterA -> #compilationWarningFrom:;
	add: #JadePresenterA -> #confirmReloadProjects:;
	add: #JadePresenterA -> #currentMethodSourceFrom:;
	add: #JadePresenterA -> #displayNoMods:;
	add: #JadePresenterA -> #editSaveMethod:in:category:;
	add: #JadePresenterA -> #isOkayToChangeSource:;
	add: #JadePresenterA -> #loadProjectsFrom:;
	add: #JadePresenterA -> #methodListSelection;
	add: #JadePresenterA -> #refreshBreakPointsIn:;
	add: #JadePresenterA -> #removeSelectorsStringUsing:;
	add: #JadePresenterA -> #reportCompileError:in:;
	add: #JadePresenterA -> #setBreakPointAt:in:;
	add: #JadePresenterA -> #updateMethodReferences:;
	add: #JadeProcessBrowser -> #debugProcess;
	add: #JadeServer -> #_describeMethod:;
	add: #JadeServer -> #sbAddPackage:;
	add: #JadeServer -> #sbChangesInPackage:;
	add: #JadeServer -> #sbClassTemplate;
	add: #JadeServer -> #sbRemoveClasses;
	add: #JadeServer -> #sbRemoveMethods:;
	add: #JadeServer -> #sbUnloadPackage:;
	add: #JadeServer -> #sbUpdateClassCategories;
	add: #JadeServer -> #sbUpdateClassHierarchy;
	add: #JadeServer -> #sbUpdateClassInfo;
	add: #JadeServer -> #sbUpdateClassList;
	add: #JadeServer -> #sbUpdateDictionaries;
	add: #JadeServer -> #sbUpdateMethodCategories;
	add: #JadeServer -> #sbUpdateMethods;
	add: #JadeServer -> #sbUpdateMethodVariables;
	add: #JadeServer -> #sbUpdatePackages;
	add: #JadeServer -> #sbUpdateSuperclass;
	add: #JadeServer -> #systemBrowserSTONA:;
	add: #JadeServer64bit -> #recompile:withSource:;
	add: #JadeServer64bit -> #systemBrowserSTON:;
	add: #JadeServer64bit3x -> #compileMethod:behavior:symbolList:inCategory:;
	add: #JadeServer64bit3x -> #sbClassComment:;
	add: #JadeServer64bit3x -> #sbUpdateMethodPragmas;
	add: #JadeSystemBrowserPresenter -> #basicAddMethodCategory:;
	add: #JadeSystemBrowserPresenter -> #basicRemoveMethods;
	add: #JadeSystemBrowserPresenter -> #browseClassReferences;
	add: #JadeSystemBrowserPresenter -> #browseClassReferences:;
	add: #JadeSystemBrowserPresenter -> #browseImplementorsOf:;
	add: #JadeSystemBrowserPresenter -> #browseMethodsAndSelect:;
	add: #JadeSystemBrowserPresenter -> #browseMethodsAndSelect:type:;
	add: #JadeSystemBrowserPresenter -> #browseMethodsContaining;
	add: #JadeSystemBrowserPresenter -> #browseSendersOf:;
	add: #JadeSystemBrowserPresenter -> #createSchematicWiring;
	add: #JadeSystemBrowserPresenter -> #createSchematicWiringForClassHierarchyTabs;
	add: #JadeSystemBrowserPresenter -> #currentMethodSource;
	add: #JadeSystemBrowserPresenter -> #editSaveClass;
	add: #JadeSystemBrowserPresenter -> #handleClassCompileError:;
	add: #JadeSystemBrowserPresenter -> #methodsMenuStrings;
	add: #JadeSystemBrowserPresenter -> #methodSourceEqual;
	add: #JadeSystemBrowserPresenter -> #onViewOpened;
	add: #JadeSystemBrowserPresenter -> #openMethodListOn:selecting:;
	add: #JadeSystemBrowserPresenter -> #packageTabName;
	add: #JadeSystemBrowserPresenter -> #postOkToChangeEvent;
	add: #JadeSystemBrowserPresenter -> #preRemoveMethods;
	add: #JadeSystemBrowserPresenter -> #queryCommand:;
	add: #JadeSystemBrowserPresenter -> #removeMethods;
	add: #JadeSystemBrowserPresenter -> #runClassTests;
	add: #JadeSystemBrowserPresenter -> #savePackage;
	add: #JadeSystemBrowserPresenter -> #selectorsString;
	add: #JadeSystemBrowserPresenter -> #updateMethod;
	add: #JadeSystemBrowserPresenter -> #updateSelector;
	add: #JadeTextDocument -> #aboutJadeite;
	add: #JadeToolsToolBarPresenter -> #browseClasses;
	add: #JadeTranscript -> #methodsChanged24;
	add: #JadeTranscript -> #methodsChangedDays;
	add: #JadeTranscript -> #openRowanProjectList;
	add: #JadeTreeMethodListPresenter -> #browseMethodsFromString:;
	add: #JadeTreeMethodListPresenter -> #browseMethodsFromString:methodName:;
	add: #JadeTreeMethodListPresenter -> #browseMethodsFromString:methodName:type:;
	add: #JadeTreeMethodListPresenter -> #onDropMethodsTree:;
	add: #ListPresenter -> #selectServiceStartingWith:;
	add: #MCClassDefinition -> #initialize:;
	add: #MCPatchBrowser -> #browseChangedThing;
	add: #MCPatchBrowser -> #operationSelected;
	add: #MethodListPresenter -> #browseClass;
	add: #MethodListPresenter -> #browseMethodsContaining;
	add: #MethodSourcePresenter -> #fileSave;
	add: #MethodSourcePresenter -> #isOkayToChange;
	add: #MethodSourcePresenter -> #methodMenuBreak:;
	add: #MethodSourcePresenter -> #updateMethodSource;
	add: #Object -> #isClassService;
	add: #Object -> #isMethodService;
	add: #Object -> #isPackageService;
	add: #Object -> #isProjectService;
	add: #Object -> #prepareForReplication;
	add: #Object -> #rowanFixMe;
	add: #ObjectLogBrowser -> #debug:;
	add: #Presenter -> #update:withSelector:;
	add: #Presenter -> #update:withSelector:browser:;
	add: #Presenter -> #updateReady:;
	add: #Presenter -> #updateSelectionsFor:;
	add: #Presenter -> #updateSelectionsForUpdate:;
	add: #RowanCommandResult -> #classCategoryUpdate:;
	add: #RowanCommandResult -> #classCommentUpdate:;
	add: #RowanCommandResult -> #classDefinitionUpdate:;
	add: #RowanCommandResult -> #classesHierarchyUpdate:;
	add: #RowanCommandResult -> #classesUpdate:browser:;
	add: #RowanCommandResult -> #classHierarchyUpdate:;
	add: #RowanCommandResult -> #classHierarchyUpdate:browser:;
	add: #RowanCommandResult -> #classMethodsUpdate:browser:;
	add: #RowanCommandResult -> #classUpdate:;
	add: #RowanCommandResult -> #dictionaryUpdate:;
	add: #RowanCommandResult -> #filterUpdate:browser:;
	add: #RowanCommandResult -> #globalsUpdate:;
	add: #RowanCommandResult -> #methodFilterUpdate:;
	add: #RowanCommandResult -> #methodSourceUpdate:browser:;
	add: #RowanCommandResult -> #methodsRemoved:;
	add: #RowanCommandResult -> #methodsUpdate:;
	add: #RowanCommandResult -> #methodUpdate:;
	add: #RowanCommandResult -> #packagesUpdate:;
	add: #RowanCommandResult -> #projectPackagesUpdate:browser:;
	add: #RowanCommandResult -> #projectSelectionUpdate:;
	add: #RowanCommandResult -> #projectsUpdate:;
	add: #RowanCommandResult -> #removedClass:;
	add: #RowanCommandResult -> #superclassListUpdate:;
	add: #RowanCommandResult -> #updateClassCategorySelectionsFor:;
	add: #RowanCommandResult -> #updateClassHierarchySelectionFor:;
	add: #RowanCommandResult -> #updateClassSelectionFor:;
	add: #RowanCommandResult -> #updateDictionarySelectionsFor:;
	add: #RowanCommandResult -> #updateMethodFilterSelectionFor:;
	add: #RowanCommandResult -> #updateMethodSelectionFor:;
	add: #RowanCommandResult -> #updatePackageSelectionsFor:;
	add: #RowanCommandResult -> #updateSelectorFor:;
	add: #RowanCommandResult -> #updateSuperclassSelectionFor:;
	add: #RowanCommandResult -> #updateType;
	add: #RowanGsMethod -> #printOn:;
	add: #RowanMethodDefinition -> #methodService;
	add: #RowanPatch -> #operations:;
	add: #RowanPatch -> #session:;
	add: 'JadeInspector class' -> #resource_Default_view;
	add: 'JadeInspector class' -> #resource_Special_view;
	add: 'JadeNavigationInspector class' -> #resource_Default_view;
	add: 'JadeServer class' -> #gsString;
	add: 'JadeServer64bit32 class' -> #gsClassDefinitionStringFor:;
	add: 'JadeSessionManager class' -> #getUrl;
	add: 'JadeSessionManager class' -> #mainShellClass;
	add: 'JadeSessionManager class' -> #setVersion;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\IDE\Base\Development System';
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Cards\Dolphin Card Containers';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Choice Prompter';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Control Bars\Dolphin Control Bars';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Difference\Dolphin Differences Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Key-Value Prompter';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Deprecated\Dolphin MVP (Deprecated)';
	add: '..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Radio\Dolphin Radio Buttons';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Rich Text Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Scintilla\Dolphin Scintilla View';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Sliding Tray\Dolphin Slidey-Inney-Outey Thing';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\Tree\Dolphin Tree Models';
	add: '..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models';
	add: '..\Core\Contributions\Burning River\ExternalProcess\ExternalProcess';
	add: 'GemStone C Interface';
	add: 'GemStone Objects';
	add: 'GemStone Services';
	add: 'GemStone Session';
	add: 'Jade Autocompletation';
	add: 'Jade Deployment';
	add: 'Jade Inspector';
	add: 'Jade Login';
	add: 'Jade Method Browser';
	add: 'Jade Process Browser';
	add: 'Jade System Browser';
	add: 'Jade Test Browser';
	add: 'Jade Transcript';
	add: 'Jade UI';
	add: 'Jade UI Base';
	add: 'Monticello';
	add: 'Object Log Browser';
	add: 'Rowan STON';
	add: '..\Core\Object Arts\Dolphin\System\Compiler\Smalltalk Parser';
	add: '..\Core\Contributions\ITC Gorisek\Source Tracking System';
	add: '..\Core\Contributions\Solutions Software\SSW EditableListView';
	add: '..\Core\Contributions\Camp Smalltalk\SUnit\SUnit';
	yourself).

package!

"Class Definitions"!

Object subclass: #Rowan
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Error subclass: #RowanDebuggerStepPointError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Model subclass: #BrowserUpdate
	instanceVariableNames: 'updates debug'
	classVariableNames: 'Current'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Model subclass: #RowanService
	instanceVariableNames: 'transport remoteService name isDirty command commandArgs updateType'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanCommandResult subclass: #RowanClassCategoryUpdate
	instanceVariableNames: 'categories selection treeModel'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanCommandResult subclass: #RowanClassesUpdate
	instanceVariableNames: 'classNames selectionNames'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanCommandResult subclass: #RowanClassInfoUpdate
	instanceVariableNames: 'oop template category comment'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanCommandResult subclass: #RowanDictionaryUpdate
	instanceVariableNames: 'dictionaries selections'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanCommandResult subclass: #RowanGlobalsUpdate
	instanceVariableNames: 'globals'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanCommandResult subclass: #RowanMethodUpdate
	instanceVariableNames: 'classOop className methodOop selector category editable source firstSendOffsets stepPoints breakPoints originalMethodSource compilationWarnings isTestClass isOverride gsMethod selected'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanCommandResult subclass: #RowanPackageUpdate
	instanceVariableNames: 'packages modifiedPackages selections'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanCommandResult subclass: #RowanProjectsUpdate
	instanceVariableNames: 'projects modifiedProjects selection'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanClassesUpdate subclass: #RowanClassHierarchyUpdate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanClassesUpdate subclass: #RowanMethodsUpdate
	instanceVariableNames: 'methods methodFilters selectors selectedClass selectedSelectors inheritedClasses inheritedClass type'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanClassesUpdate subclass: #RowanSuperclassUpdate
	instanceVariableNames: 'tabName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanAnsweringService
	instanceVariableNames: 'answer'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanBrowserService
	instanceVariableNames: 'projects removedMethods allClasses hierarchyServices'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanClassService
	instanceVariableNames: 'comment instVarNames classVarNames classInstVarNames superclassName subclassType poolDictionaryNames classType meta isExtension version versions template oop filters filterType methods packageName definedPackageName selectedPackageServices selectedMethods projectName hierarchyServices variables categories'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanDebuggerService
	instanceVariableNames: 'initialProcessOop processes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanFrameService
	instanceVariableNames: 'label method stepPoint vars'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanMethodService
	instanceVariableNames: 'source selector methodDefinitions category packageName projectName className meta user hasSupers hasSubs isExtension inSelectedPackage references stepPoints selectedPackageServices superSource superDisplayString accessedInstVars breakPoints oop compilationWarnings'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanPackageService
	instanceVariableNames: 'classes defaultTemplate projectName classCompilationFailures'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanProcessService
	instanceVariableNames: 'frames oop status'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanProjectService
	instanceVariableNames: 'sha branch isSkew packages changes'
	classVariableNames: 'DefaultProjectName'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanQueryService
	instanceVariableNames: 'queryResults'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanVariableService
	instanceVariableNames: 'oop key value className'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #RowanPresenter
	instanceVariableNames: 'projectToolsOop'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MethodSourcePresenter subclass: #RowanMethodSourcePresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanMethodSourcePresenter subclass: #JadeiteMethodSourcePresenter
	instanceVariableNames: 'methodService'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeMethodListPresenter subclass: #RowanMethodListPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanMethodListPresenter subclass: #JadeiteMethodListPresenter
	instanceVariableNames: 'textAreaTabs comparisonTab comparisonPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeAutoSystemBrowserPresenter subclass: #RowanSystemBrowserPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanSystemBrowserPresenter subclass: #JadeiteProjectsBrowserPresenter
	instanceVariableNames: 'projectListPresenter stonCritical projectInfoTab projectLabel projectDictionaryTabs comparisonPresenter comparisonTab'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MethodListPresenter subclass: #PackageMethodListPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
PackageMethodListPresenter subclass: #JadeiteBasicMethodListPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanPresenter subclass: #RowanMethodSelectionPresenter
	instanceVariableNames: 'methodListPresenter methodSourcePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanPresenter subclass: #RowanPackagePresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanPresenter subclass: #RowanProjectListPresenter
	instanceVariableNames: 'projectListPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
KeyValuePrompter subclass: #RowanKeyValuePrompter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCVersionDialog subclass: #RowanSavePackageDialog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeFindClassDialog subclass: #JadeiteFindClassDialog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeLoginShell subclass: #RowanLoginShell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeDebugger subclass: #RowanDebugger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'debuggerClass semaphore'!
JadeTranscript subclass: #RowanTranscript
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeShell subclass: #RowanShell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeMethodListBrowser subclass: #RowanMethodListBrowser
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanMethodListBrowser subclass: #JadeiteMethodListBrowser
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeSystemBrowser subclass: #RowanSystemBrowser
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanSystemBrowser subclass: #JadeiteProjectsSystemBrowser
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCPatchBrowser subclass: #RowanPatchBrowser
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanShell subclass: #RowanPackageShell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanShell subclass: #RowanProjectListShell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #RowanServiceTest
	instanceVariableNames: 'shell methodService gciSession classService'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!CodeSourcePresenter methodsFor!

browseSelectedClass
	| range string list assoc parent shell |
	range := documentPresenter view selectionRange.
	string := documentPresenter value copyFrom: range start to: range stop.
	list := self findClassList.
	assoc := list detect: [:each | each key = string]
				ifNone: [^MessageBox warning: 'Class ' , string printString , ' not found!!!!' caption: 'Jade'].
	parent := parentPresenter parentPresenter parentPresenter.
	parent isNil
		ifTrue: 
			[shell := RowanSystemBrowser showOnSession: gciSession.
			shell selectClass: string selector: String new]
		ifFalse: [parent addSystemBrowserForClass: assoc value]!

executeSelectionOrLine

	[
		^true -> (gciSession executeString: self currentSelectionOrLine fromContext: self parentPresenter contextObject environment: environment).
	] on: GsCompileError do: [:ex | 
		^false -> ex list.
	].
	self error: 'How did we get here?'.
	^false -> #(nil).
! !
!CodeSourcePresenter categoriesFor: #browseSelectedClass!public! !
!CodeSourcePresenter categoriesFor: #executeSelectionOrLine!Jade!private! !

!Collection methodsFor!

prepareForReplication
	self do: [:element | element prepareForReplication]! !
!Collection categoriesFor: #prepareForReplication!Jadeite!public! !

!GciSession methodsFor!

computeGemHost
	| list |
	list := gemNRS subStrings: $#.
	netPort := ((list at: 2) subStrings: $:) at: 2.
	netTask := ((list at: 3) subStrings: $!!) at: 2.
	gemHost := ((list at: 1) subStrings: $@) at: 2!

computeStoneHost
	| list |
	list := stoneNRS subStrings: $!!.
	stoneName := list at: 3.
	list := (list at: 2) subStrings: $#.
	list := (list at: 1) subStrings: $@.
	stoneHost := list at: 2.!

hasServer

	^server notNil.
!

initializeServer
"
	GciSession allInstances first initializeServer.
"
	library ifNil: [^self].
	[
		server := self executeString: library jadeServerClass gsString.
	] on: GsRuntimeError do: [:ex | 
		| number notes |
		number := ex errorReport number.
		notes := ''.
		number = 2151 ifTrue: [notes := ' (code modification?)'].
		MessageBox warning: ex description , notes , '
Server initialization failed. Most functionality will be broken!!'.
		SessionManager current pause.
		ex return: nil.
	].

	(server isKindOf: String) ifTrue: [
		self logout.
		GciLoginFailed
			signal: 'JadeServer compile error:
' , server
			with: self.
	].
	self commit.

	1 ~~ 1 ifTrue: [		"messasges that are sent by a ClientForwarderSend should not be stripped"
		self 
			signalConfirmationRequestUsing: nil;
			signalTextRequestUsing: nil;
			yourself.
	].
!

postLoginAs: aString useSocket: aBoolean
	self verifyRowanLoaded ifFalse: [^MessageBox notify: 'Rowan not loaded or $ROWAN_PROJECTS_HOME not set. Logging out.' "log out in RowinLoginShell>>postLogin:"].
	"self initializeServer."
	server := self executeString: '| server | 
			server := (Rowan jadeServerClassNamed: #JadeServer64bit32) new initialize; yourself.
			System _sessionStateAt: 3 put: server.
			^server'.
	aBoolean ifTrue: [self attemptSocket].
	self setInitials: aString	"This gets back the session and serial number"!

titleBarFor: windowName
	| stream |
	self computeStoneHost.
	stream := WriteStream on: String new.
	stream
		nextPutAll: windowName;
		nextPutAll: ' for ';
		nextPutAll: userID asString;
		nextPutAll: ' on ';
		nextPutAll: stoneName asString;
		nextPutAll: ' [';
		print: gciSessionId;
		nextPutAll: ']'.
	self isRemoteGem
		ifTrue: 
			[self computeGemHost.
			stream
				nextPutAll: ' with remote gem on ';
				nextPutAll: gemHost asString]
		ifFalse: [stream nextPutAll: ' with linked gem'].
	^stream contents!

verifyRowanLoaded
	"The global Rowan indicates the Rowan packages are loaded. 
	The ROWAN_PROJECTS_HOME gem environment variable is also required"

	^self
		executeString: '(System myUserProfile objectNamed: ''Rowan'') notNil and:[(System gemEnvironmentVariable: ''ROWAN_PROJECTS_HOME'') notNil] '! !
!GciSession categoriesFor: #computeGemHost!public!title bar! !
!GciSession categoriesFor: #computeStoneHost!public!title bar! !
!GciSession categoriesFor: #hasServer!public! !
!GciSession categoriesFor: #initializeServer!private! !
!GciSession categoriesFor: #postLoginAs:useSocket:!private! !
!GciSession categoriesFor: #titleBarFor:!public!title bar! !
!GciSession categoriesFor: #verifyRowanLoaded!private! !

!GsError methodsFor!

debugError
	^RowanDebugger debuggerClass reportError: self.

! !
!GsError categoriesFor: #debugError!public! !

!GsMethod methodsFor!

methodService
	^RowanMethodService on: gciSession! !
!GsMethod categoriesFor: #methodService!public!rowan! !

!JadeAutoTextPresenter3 methodsFor!

defaultMethod

^'methodSelector
	"method comment"

	| temps |
	^self yourself.
'.
!

setDefaultMethod

	view 
		value: self defaultMethod;
		isModified: false;
		isReadOnly: false;
		yourself.! !
!JadeAutoTextPresenter3 categoriesFor: #defaultMethod!public! !
!JadeAutoTextPresenter3 categoriesFor: #setDefaultMethod!public! !

!JadeDebugger methodsFor!

updateCaption
	self caption: (gciSession
				titleBarFor: (self class == RowanDebugger
				ifTrue: ['New Jadeite Debugger']
				ifFalse: ['Jade Debugger']))! !
!JadeDebugger categoriesFor: #updateCaption!public! !

!JadeErrorShell methodsFor!

doCopy
	| copyStream |
	copyStream := WriteStream on: String new. 
	copyStream nextPutAll: caption;
		cr; 
		nextPutAll: stackPresenter value.
	copyStream contents copyToClipboard.!

onViewOpened

	| gsError gsProcess message detail stack stream |
	gsError := self model value.
	super onViewOpened.
	Sound warningBeep.
	gsProcess := gsError gsProcess.
	message := gsError errorReport message.
	isResumable := gsError isResumableInGem.
	detail := message.
	message := message notEmpty
		ifTrue: [(message subStrings: Character lf) first]
		ifFalse: [''].
	message := message copyFrom: 1 to: (message size min: 100).
	self caption: message.
	messagePresenter value: detail replaceLfWithCrLf.
	stream := WriteStream on: String new.
	stack := gsProcess stack.
	stack do: [:each | stream nextPutAll: each; cr].
	stackPresenter value: stream contents.
	self model: #'terminate'.		"If window is closed without any buttons pressed!!"! !
!JadeErrorShell categoriesFor: #doCopy!public! !
!JadeErrorShell categoriesFor: #onViewOpened!public! !

!JadeFindClassDialog methodsFor!

initializeAvailable
	^self model value asSortedCollection! !
!JadeFindClassDialog categoriesFor: #initializeAvailable!private! !

!JadeImageStripper methodsFor!

closeLoginShells

	JadeLoginShell allInstances do: [:each | each view close].
	RowanLoginShell allInstances do: [:each | each view close].

!

createVersionResource
"
	JadeImageStripper new createVersionResource.
"
	| versionString version |
	versionString := JadeSessionManager getVersion.
	version := (versionString subStrings: $-) first.
	self versionResource
		fileVersion: version;
		productVersion: version;
		stringTables: (LookupTable new
			at: '040904b0' 
			put: (LookupTable new
				at: 'CompanyName' 		put: 'GemTalk Systems LLC';
				at: 'FileDescription' 		put: 'IDE for GemStoneS/64 with Rowan Source Code Control';
				at: 'FileVersion' 			put: versionString;
				at: 'InternalName' 		put: 'Jadeite';
				at: 'LegalCopyright' 		put: 'Copyright � GemTalk Systems 2018';
				at: 'OriginalFilename' 	put: 'Jadeite.exe';
				at: 'ProductName' 		put: 'Jadeite';
				at: 'ProductVersion' 		put: versionString;
				yourself);
			yourself);
		yourself.
!

requiredClasses
	^(super requiredClasses)
		addAll: JadeServer withAllSubclasses;
		addAll: GciError withAllSubclasses;
		addAll: GsError withAllSubclasses;
		addAll: GciLibrary withAllSubclasses;
		addAll: GsHostProcess withAllSubclasses;
		addAll: GsShellCommand withAllSubclasses;
		addAll: GsWin32Service withAllSubclasses;
		add: NTLibrary;
		add: StParseNodeVisitor;
		addAll: StProgramNode withAllSubclasses;
		addAll: StToken withAllSubclasses;
		add: ScintillaIndicator;
		add: WaitOnGemStoneDialog;
		addAll: RowanService withAllSubclasses;
		addAll: RowanCommandResult withAllSubclasses;
		yourself!

requiredPackageNames

	^super requiredPackageNames
		add: 'Development System'; 		"to get StKeywordToken>>#preComments"
		add: 'GemStone C Interface';
		add: 'GemStone Session';
		add: 'GemStone Objects';
		add: 'GemStone Services';
		add: 'Jade Inspector';
		add: 'Jade Login';
		add: 'Jade System Browser';
		add: 'Jade Transcript';
		add: 'Jade User Browser';
		add: 'JGF Dolphin';
		add: 'JGF Dolphin MVP Base';
		add: 'JGF Fading Dialog';
		add: 'Jade UI';
		add: 'Object Log Browser';
		add: 'Jade from Dolphin';
		add: 'Jade Process Browser';
		add: 'Rowan UI Base';
		add: 'Rowan STON';
		add: 'Dolphin Announcements';
		yourself! !
!JadeImageStripper categoriesFor: #closeLoginShells!public! !
!JadeImageStripper categoriesFor: #createVersionResource!public! !
!JadeImageStripper categoriesFor: #requiredClasses!public! !
!JadeImageStripper categoriesFor: #requiredPackageNames!public! !

!JadeInspector methodsFor!

displayObject
	| result stream theClassName oop size instVarNames |
	(model isKindOf: ExternalInteger)
		ifFalse: 
			[className := model class name.
			documentPresenter value: model. 
			^self].
	result := gciSession serverPerform: #inspect: with: model.
	(result isKindOf: ByteArray) ifTrue: [result := result asString].
	(result isKindOf: String)
		ifFalse: 
			[self error: 'Result of #inspect: on ' , model printString , ' should be a String but is '
						, model class name].
	stream := ReadStream on: result.
	theClassName := stream upTo: Character tab.
	self setLastGsShape: theClassName.
	oop := stream nextLine.
	size := stream nextLine asNumber.
	instVarNames := OrderedCollection with: '-.asOop' -> oop.
	size timesRepeat: 
			[| name |
			name := '-' , (stream upTo: Character tab).
			oop := stream upTo: Character lf.
			instVarNames add: name -> (gciSession oopTypeWithOop: oop asNumber)].
	instVarNames addFirst: 'self' -> stream upToEnd.
	instVarListPresenter
		list: instVarNames;
		selection: instVarNames first;
		yourself.
	className := theClassName!

onViewOpened
	super onViewOpened.
	self displayObject.
	self updateCaption!

setDocumentPresenterLabel
	(model isKindOf: String) ifTrue: [
		documentPresenter value: model.
		self view caption: 'String (' , model size printString , ' characters)'.
		^self.
	].
	(model isKindOf: ByteArray) ifTrue: [
		documentPresenter value: model printString.
		self view caption: model class name , ' (' , model size printString , ' bytes)'.
		^self.
	].
	(model isKindOf: Integer) ifTrue: [
		documentPresenter value: model printString.
		self view caption: 'Integer'.
		^self.
	].
	model isNil ifTrue: [
		documentPresenter value: model printString.
		self view caption: 'UndefinedObject'.
		^self.
	].
	(model isKindOf: Boolean) ifTrue: [
		documentPresenter value: model printString.
		self view caption: 'Boolean'.
		^self.
	]. 
	(model isKindOf: Character) ifTrue: [
		documentPresenter value: model printString.
		self view caption: 'Character'.
		^self.
	]. 
	(model isKindOf: Float) ifTrue: [
		documentPresenter value: model printString.
		self view caption: 'Float'.
		^self.
	].
	(model isKindOf: Fraction) ifTrue: [
		documentPresenter value: model printString.
		self view caption: 'Fraction'.
		^self.
	].
!

setLastGsShape: name
	codePane setDocumentPresenterWith: (self registry getClass: name)!

shellName
	className ifNil: [^String new	"not available yet"].
	^'Inspector on ' , className , self shellNameExtraInfo!

shellNameExtraInfo
	(model isKindOf: String) ifTrue: [^' (' , model size printString , ' characters)'].
	(model isKindOf: ByteArray) ifTrue: [^' (' , model size printString , ' bytes)'].
	^String new!

updateCaption
	self caption: (gciSession titleBarFor: self shellName).! !
!JadeInspector categoriesFor: #displayObject!accessing!private! !
!JadeInspector categoriesFor: #onViewOpened!event handling!private! !
!JadeInspector categoriesFor: #setDocumentPresenterLabel!displaying!private! !
!JadeInspector categoriesFor: #setLastGsShape:!accessing!private! !
!JadeInspector categoriesFor: #shellName!displaying!private! !
!JadeInspector categoriesFor: #shellNameExtraInfo!displaying!private! !
!JadeInspector categoriesFor: #updateCaption!displaying!private! !

!JadeInspector class methodsFor!

resource_Default_view
	"Answer the literal data from which the 'Default view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Default_view)
	"

	^#(#'!!STL' 4 788558 10 ##(Smalltalk.STBViewProxy) ##(Smalltalk.ShellView) 34 27 nil nil 8 #(13565952 65536) 416 nil 524550 ##(Smalltalk.ColorRef) 8 4278190080 328198 ##(Smalltalk.Point) 1201 901 551 nil nil nil 416 788230 ##(Smalltalk.BorderLayout) 1 1 410 ##(Smalltalk.ContainerView) 34 15 nil 416 34 2 8 1140850688 131073 576 nil 721158 ##(Smalltalk.SystemColor) 31 nil 7 nil nil nil 576 1180166 ##(Smalltalk.ProportionalLayout) 170 176 8 #() false 170 192 720 nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createAt:extent: 34 2 514 1 1 514 1169 49 576 983302 ##(Smalltalk.WINDOWPLACEMENT) 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 24 0 0 0] 34 1 410 ##(Smalltalk.Toolbar) 34 25 nil 576 34 2 8 1409288972 131137 960 nil 466 8 4278190080 nil 519 nil 263174 ##(Smalltalk.Font) nil true 459014 ##(Smalltalk.LOGFONT) 8 #[243 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 144 1 0 0 0 0 0 0 3 2 1 34 65 114 105 97 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 514 193 193 nil 960 466 1040 8 4294905811 170 192 720 170 192 34 2 31587 1115910 ##(Smalltalk.ToolbarIconButton) 31587 nil 960 1 1180998 4 ##(Smalltalk.CommandDescription) #openNavigationInspector 8 'Open Navigation Inspector' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'BasicInspector.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 395334 3 ##(Smalltalk.Bitmap) nil true nil nil nil nil 3 514 33 33 1 34 1 1248 170 176 34 2 1456 1 nil 1 nil 514 33 33 514 45 45 nil 656198 1 ##(Smalltalk.FlowLayout) 1 1 1 754 138 144 34 2 818 #createAt:extent: 34 2 514 1 1 514 1169 49 960 818 #updateSizePosted 720 960 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 24 0 0 0] 8 #() 514 193 193 nil 27 1776 nil 27 nil nil nil 410 ##(Smalltalk.ContainerView) 34 15 nil 416 34 2 8 1140850688 131073 1792 nil nil nil 7 nil nil nil 1792 674 170 176 720 false 170 192 34 4 410 ##(Smalltalk.ReferenceView) 34 14 nil 1792 34 2 8 1140850688 131073 1920 nil 466 8 4278190080 nil 7 nil nil nil 1920 1180166 ##(Smalltalk.ResourceIdentifier) ##(Smalltalk.CodeSourcePresenter) #resource_Default_view nil 754 138 144 34 1 818 #createAt:extent: 34 2 514 589 1 514 581 735 1920 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 38 1 0 0 0 0 0 0 72 2 0 0 111 1 0 0] 720 1776 nil 27 8 'codePane' 410 ##(Smalltalk.ListBox) 34 17 nil 1792 34 2 8 1144062209 1025 2208 590662 2 ##(Smalltalk.ListModel) 138 144 720 nil 1310726 ##(Smalltalk.IdentitySearchPolicy) 466 8 4278190080 nil 7 nil nil nil 2208 nil 8 4294904115 459270 ##(Smalltalk.Message) #key 8 #() 720 false 754 138 144 34 2 818 #createAt:extent: 34 2 514 1 1 514 579 735 2208 818 #horizontalExtent: 8 #(0) 2208 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 33 1 0 0 111 1 0 0] 8 #() 1776 nil 27 8 'instVarList' nil 754 138 144 34 1 818 #createAt:extent: 34 2 514 1 49 514 1169 735 1792 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 24 0 0 0 72 2 0 0 135 1 0 0] 34 3 2208 410 ##(Smalltalk.Splitter) 34 12 nil 1792 34 2 8 1140850688 1 2816 nil 466 8 4278190080 nil 519 nil nil nil 2816 754 138 144 34 1 818 #createAt:extent: 34 2 514 579 1 514 11 735 2816 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 33 1 0 0 0 0 0 0 38 1 0 0 111 1 0 0] 8 #() 1776 nil 27 1920 1776 nil 27 170 192 720 nil 461638 4 ##(Smalltalk.MenuBar) nil true 34 4 265030 4 ##(Smalltalk.Menu) nil true 34 7 984134 2 ##(Smalltalk.CommandMenuItem) 1 1266 #fileNew 8 '&New Workspace' 9373 1 nil nil nil 3186 1 1266 #fileOpen 8 '&Open Workspace...' 9375 1 nil nil nil 3186 1 1266 #fileSave 8 '&Save' 9383 1 nil nil nil 3186 1 1266 #fileSaveAs 8 'Save &As...' 1 1 nil nil nil 3186 1 1266 #fileRevert 8 '&Revert' 1025 1 nil nil nil 983366 1 ##(Smalltalk.DividerMenuItem) 4097 3186 1 1266 #exit 8 'E&xit Jade' 17639 1 nil nil nil 8 '&File' nil 1 nil nil 31539 nil nil 3138 nil true 34 15 3186 1 1266 #undo 8 '&Undo' 9397 1 nil nil nil 3186 1 1266 #redo 8 'R&edo' 9395 1 nil nil nil 3442 4097 3186 1 1266 #editCut 8 'Cu&t' 9393 1 nil nil nil 3186 1 1266 #editCopy 8 '&Copy' 9351 1 nil nil nil 3186 1 1266 #editPaste 8 '&Paste' 9389 1 nil nil nil 3186 1 1266 #editSelectAll 8 'Select &All' 9347 1 nil nil nil 3186 1 1266 #editDelete 8 '&Delete' 1629 1 nil nil nil 3442 4097 3186 1 1266 #editFind 8 '&Find...' 9357 1 nil nil nil 3186 1 1266 #editFindNext 8 'Find &Next' 9359 1 nil nil nil 3186 1 1266 #editReplace 8 '&Replace...' 9361 1 nil nil nil 3442 4097 3186 1 1266 #addQuotesToSelection 8 'Add &Quotes' 1 1 nil nil nil 3186 1 1266 #removeQuotesFromSelection 8 'Re&move Quotes' 1 1 nil nil nil 8 '&Edit' nil 1 nil nil 31565 nil nil 3138 nil true 34 9 3186 1 1266 #abortTransaction 8 '&Abort Transaction' 1 1 nil nil nil 3186 1 1266 #commitTransaction 8 '&Commit Transaction' 1 1 nil nil nil 3442 4097 3186 1 1266 #jadeInspect 8 '&Inspect' 9379 1 nil nil nil 3186 1 1266 #jadeDisplay 8 '&Display' 9353 1 nil nil nil 3186 1 1266 #jadeExecute 8 '&Execute' 9355 1 nil nil nil 3186 1 1266 #fileIn 8 'Fi&le In' 1 1 nil nil nil 3442 4097 3186 1 1266 #openDictionaryBrowser 8 '&Browse Classes' 9349 1 nil nil nil 8 '&Jade' nil 1 nil nil 31581 nil nil 3138 nil true 34 1 3186 1 1266 #aboutJadeite 8 '&About Jade' 1 1 nil nil nil 8 '&Help' nil 1 nil nil 31585 nil nil 8 '' nil 1 nil nil nil nil nil nil nil nil 1 nil nil nil nil 1 nil nil 754 138 144 34 3 818 #createAt:extent: 34 2 514 7679 21 514 1201 901 416 818 #text: 34 1 8 'Jade Object Inspector' 416 818 #updateMenuBar 720 416 898 8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 14 0 0 10 0 0 0 87 17 0 0 204 1 0 0] 34 2 576 1792 1776 nil 27)!

resource_Special_view
	"Answer the literal data from which the 'Special view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Special_view)
	"

	^#(#'!!STL' 4 788558 10 ##(Smalltalk.STBViewProxy) ##(Smalltalk.ShellView) 34 27 nil nil 8 #(13565952 65536) 416 nil 524550 ##(Smalltalk.ColorRef) 8 4278190080 328198 ##(Smalltalk.Point) 1201 901 551 nil nil nil 416 1180166 ##(Smalltalk.ProportionalLayout) 170 176 8 #() false 170 192 34 2 410 ##(Smalltalk.MultilineTextEdit) 34 16 nil 416 34 2 8 1143017796 1025 640 nil 466 8 4278190080 nil 7 nil nil nil 640 nil 8 4294905285 852486 ##(Smalltalk.NullConverter) nil nil 11 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createAt:extent: 34 2 514 1 1 514 1169 783 640 983302 ##(Smalltalk.WINDOWPLACEMENT) 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 135 1 0 0] 8 #() 514 193 193 nil 27 8 'document' nil 461638 4 ##(Smalltalk.MenuBar) nil true 34 4 265030 4 ##(Smalltalk.Menu) nil true 34 7 984134 2 ##(Smalltalk.CommandMenuItem) 1 1180998 4 ##(Smalltalk.CommandDescription) #fileNew 8 '&New Workspace' 9373 1 nil nil nil 1122 1 1154 #fileOpen 8 '&Open Workspace...' 9375 1 nil nil nil 1122 1 1154 #fileSave 8 '&Save' 9383 1 nil nil nil 1122 1 1154 #fileSaveAs 8 'Save &As...' 1 1 nil nil nil 1122 1 1154 #fileRevert 8 '&Revert' 1025 1 nil nil nil 983366 1 ##(Smalltalk.DividerMenuItem) 4097 1122 1 1154 #exit 8 'E&xit Jade' 17639 1 nil nil nil 8 '&File' nil 1 nil nil 30927 nil nil 1074 nil true 34 15 1122 1 1154 #undo 8 '&Undo' 9397 1 nil nil nil 1122 1 1154 #redo 8 'R&edo' 9395 1 nil nil nil 1394 4097 1122 1 1154 #editCut 8 'Cu&t' 9393 1 nil nil nil 1122 1 1154 #editCopy 8 '&Copy' 9351 1 nil nil nil 1122 1 1154 #editPaste 8 '&Paste' 9389 1 nil nil nil 1122 1 1154 #editSelectAll 8 'Select &All' 9347 1 nil nil nil 1122 1 1154 #editDelete 8 '&Delete' 1629 1 nil nil nil 1394 4097 1122 1 1154 #editFind 8 '&Find...' 9357 1 nil nil nil 1122 1 1154 #editFindNext 8 'Find &Next' 9359 1 nil nil nil 1122 1 1154 #editReplace 8 '&Replace...' 9361 1 nil nil nil 1394 4097 1122 1 1154 #addQuotesToSelection 8 'Add &Quotes' 1 1 nil nil nil 1122 1 1154 #removeQuotesFromSelection 8 'Re&move Quotes' 1 1 nil nil nil 8 '&Edit' nil 1 nil nil 30953 nil nil 1074 nil true 34 9 1122 1 1154 #abortTransaction 8 '&Abort Transaction' 1 1 nil nil nil 1122 1 1154 #commitTransaction 8 '&Commit Transaction' 1 1 nil nil nil 1394 4097 1122 1 1154 #jadeInspect 8 '&Inspect' 9379 1 nil nil nil 1122 1 1154 #jadeDisplay 8 '&Display' 9353 1 nil nil nil 1122 1 1154 #jadeExecute 8 '&Execute' 9355 1 nil nil nil 1122 1 1154 #fileIn 8 'Fi&le In' 1 1 nil nil nil 1394 4097 1122 1 1154 #openDictionaryBrowser 8 '&Browse Classes' 9349 1 nil nil nil 8 '&Jade' nil 1 nil nil 30969 nil nil 1074 nil true 34 1 1122 1 1154 #aboutJadeite 8 '&About Jade' 1 1 nil nil nil 8 '&Help' nil 1 nil nil 30973 nil nil 8 '' nil 1 nil nil nil nil nil nil nil nil 1 nil nil nil nil 1 nil nil 786 138 144 34 3 850 #createAt:extent: 34 2 514 7679 21 514 1201 901 416 850 #text: 34 1 8 'Jade Object Inspector' 416 850 #updateMenuBar 592 416 930 8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 14 0 0 10 0 0 0 87 17 0 0 204 1 0 0] 34 1 640 992 nil 27)! !
!JadeInspector class categoriesFor: #resource_Default_view!public!resources-views! !
!JadeInspector class categoriesFor: #resource_Special_view!public!resources-views! !

!JadeLoginShell methodsFor!

aboutJadeite
	"See also JadeTextDocument>>#'aboutJadeite'"

	self class aboutJadeite! !
!JadeLoginShell categoriesFor: #aboutJadeite!public! !

!JadeNavigationInspector methodsFor!

setNewInspectedObject

	self model: (self gciSession oopTypeWithOop: (oopsCollection at: objectIndex)).
	self displayObject.
	self updateCaption. 
! !
!JadeNavigationInspector categoriesFor: #setNewInspectedObject!public! !

!JadeNavigationInspector class methodsFor!

resource_Default_view
	"Answer the literal data from which the 'Default view' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Default_view)
	"

	^#(#'!!STL' 4 788558 10 ##(Smalltalk.STBViewProxy) ##(Smalltalk.ShellView) 34 27 nil nil 8 #(13565952 65536) 416 nil 524550 ##(Smalltalk.ColorRef) 8 4278190080 328198 ##(Smalltalk.Point) 1201 901 551 nil nil nil 416 788230 ##(Smalltalk.BorderLayout) 1 1 410 ##(Smalltalk.ContainerView) 34 15 nil 416 34 2 8 1140850688 131073 576 nil 721158 ##(Smalltalk.SystemColor) 31 nil 7 nil nil nil 576 1180166 ##(Smalltalk.ProportionalLayout) 170 176 8 #() false 170 192 720 nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 1 721670 ##(Smalltalk.MessageSend) #createAt:extent: 34 2 514 1 1 514 1169 49 576 983302 ##(Smalltalk.WINDOWPLACEMENT) 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 24 0 0 0] 34 1 410 ##(Smalltalk.Toolbar) 34 25 nil 576 34 2 8 1409288972 131137 960 nil 466 8 4278190080 nil 519 nil 263174 ##(Smalltalk.Font) nil true 459014 ##(Smalltalk.LOGFONT) 8 #[243 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 144 1 0 0 0 0 0 0 3 2 1 34 65 114 105 97 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 514 193 193 nil 960 466 1040 8 4294905811 170 192 720 170 192 34 8 33243 1115910 ##(Smalltalk.ToolbarIconButton) 33243 nil 960 1 1180998 4 ##(Smalltalk.CommandDescription) #openNavigationInspector 8 'Open Navigation Inspector' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'BasicInspector.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 395334 3 ##(Smalltalk.Bitmap) nil true nil nil nil nil 3 514 33 33 1 33237 1234 33237 nil 960 1 1266 #getPreviousObject 8 'Previous Object' 1 1 1314 nil true 1360 8 'HistoryBack.ico' 1408 1442 nil true nil nil nil nil 3 514 33 33 1 33239 1234 33239 nil 960 1 1266 #getNextObject 8 'Next Object' 1 1 1314 nil true 1360 8 'HistoryForward.ico' 1408 1442 nil true nil nil nil nil 3 514 33 33 1 33241 1234 33241 nil 960 1 1266 #removeObject 8 'Remove Object' 1 1 1314 nil true 1360 8 'False.ico' 1408 1442 nil true nil nil nil nil 3 514 33 33 1 34 6 1488 1600 1050118 ##(Smalltalk.ToolbarSeparator) nil nil 960 3 nil 1 1712 1842 nil nil 960 3 nil 1 1248 170 176 34 8 1680 3 1792 5 1456 7 1568 1 nil 1 nil 514 33 33 514 45 45 nil 656198 1 ##(Smalltalk.FlowLayout) 1 1 1 754 138 144 34 2 818 #createAt:extent: 34 2 514 1 1 514 1169 49 960 818 #updateSizePosted 720 960 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 72 2 0 0 24 0 0 0] 8 #() 514 193 193 nil 27 2160 nil 27 nil nil nil 410 ##(Smalltalk.ContainerView) 34 15 nil 416 34 2 8 1140850688 131073 2176 nil 642 31 nil 7 nil nil nil 2176 674 170 176 720 false 170 192 34 4 410 ##(Smalltalk.ReferenceView) 34 14 nil 2176 34 2 8 1140850688 131073 2320 nil 466 8 4278190080 nil 7 nil nil nil 2320 1180166 ##(Smalltalk.ResourceIdentifier) ##(Smalltalk.CodeSourcePresenter) #resource_Default_view nil 754 138 144 34 1 818 #createAt:extent: 34 2 514 589 1 514 581 735 2320 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 38 1 0 0 0 0 0 0 72 2 0 0 111 1 0 0] 720 2160 nil 27 8 'codePane' 410 ##(Smalltalk.ListBox) 34 17 nil 2176 34 2 8 1144062209 1025 2608 590662 2 ##(Smalltalk.ListModel) 138 144 720 nil 1310726 ##(Smalltalk.IdentitySearchPolicy) 466 8 4278190080 nil 7 nil nil nil 2608 nil 8 4294904115 459270 ##(Smalltalk.Message) #key 8 #() 720 false 754 138 144 34 2 818 #createAt:extent: 34 2 514 1 1 514 579 735 2608 818 #horizontalExtent: 8 #(0) 2608 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 33 1 0 0 111 1 0 0] 8 #() 2160 nil 27 8 'instVarList' nil 754 138 144 34 1 818 #createAt:extent: 34 2 514 1 49 514 1169 735 2176 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 24 0 0 0 72 2 0 0 135 1 0 0] 34 3 2608 410 ##(Smalltalk.Splitter) 34 12 nil 2176 34 2 8 1140850688 1 3216 nil 466 8 4278190080 nil 519 nil nil nil 3216 754 138 144 34 1 818 #createAt:extent: 34 2 514 579 1 514 11 735 3216 898 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 33 1 0 0 0 0 0 0 38 1 0 0 111 1 0 0] 8 #() 2160 nil 27 2320 2160 nil 27 170 192 720 nil 461638 4 ##(Smalltalk.MenuBar) nil true 34 4 265030 4 ##(Smalltalk.Menu) nil true 34 7 984134 2 ##(Smalltalk.CommandMenuItem) 1 1266 #fileNew 8 '&New Workspace' 9373 1 nil nil nil 3586 1 1266 #fileOpen 8 '&Open Workspace...' 9375 1 nil nil nil 3586 1 1266 #fileSave 8 '&Save' 9383 1 nil nil nil 3586 1 1266 #fileSaveAs 8 'Save &As...' 1 1 nil nil nil 3586 1 1266 #fileRevert 8 '&Revert' 1025 1 nil nil nil 983366 1 ##(Smalltalk.DividerMenuItem) 4097 3586 1 1266 #exit 8 'E&xit Jade' 17639 1 nil nil nil 8 '&File' nil 1 nil nil 33189 nil nil 3538 nil true 34 15 3586 1 1266 #undo 8 '&Undo' 9397 1 nil nil nil 3586 1 1266 #redo 8 'R&edo' 9395 1 nil nil nil 3842 4097 3586 1 1266 #editCut 8 'Cu&t' 9393 1 nil nil nil 3586 1 1266 #editCopy 8 '&Copy' 9351 1 nil nil nil 3586 1 1266 #editPaste 8 '&Paste' 9389 1 nil nil nil 3586 1 1266 #editSelectAll 8 'Select &All' 9347 1 nil nil nil 3586 1 1266 #editDelete 8 '&Delete' 1629 1 nil nil nil 3842 4097 3586 1 1266 #editFind 8 '&Find...' 9357 1 nil nil nil 3586 1 1266 #editFindNext 8 'Find &Next' 9359 1 nil nil nil 3586 1 1266 #editReplace 8 '&Replace...' 9361 1 nil nil nil 3842 4097 3586 1 1266 #addQuotesToSelection 8 'Add &Quotes' 1 1 nil nil nil 3586 1 1266 #removeQuotesFromSelection 8 'Re&move Quotes' 1 1 nil nil nil 8 '&Edit' nil 1 nil nil 33215 nil nil 3538 nil true 34 9 3586 1 1266 #abortTransaction 8 '&Abort Transaction' 1 1 nil nil nil 3586 1 1266 #commitTransaction 8 '&Commit Transaction' 1 1 nil nil nil 3842 4097 3586 1 1266 #jadeInspect 8 '&Inspect' 9379 1 nil nil nil 3586 1 1266 #jadeDisplay 8 '&Display' 9353 1 nil nil nil 3586 1 1266 #jadeExecute 8 '&Execute' 9355 1 nil nil nil 3586 1 1266 #fileIn 8 'Fi&le In' 1 1 nil nil nil 3842 4097 3586 1 1266 #openDictionaryBrowser 8 '&Browse Classes' 9349 1 nil nil nil 8 '&Jade' nil 1 nil nil 33231 nil nil 3538 nil true 34 1 3586 1 1266 #aboutJadeite 8 '&About Jade' 1 1 nil nil nil 8 '&Help' nil 1 nil nil 33235 nil nil 8 '' nil 1 nil nil nil nil nil nil nil nil 1 nil nil nil nil 1 nil nil 754 138 144 34 3 818 #createAt:extent: 34 2 514 7679 21 514 1201 901 416 818 #text: 34 1 8 'Jade Object Navigation Inspector' 416 818 #updateMenuBar 720 416 898 8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 14 0 0 10 0 0 0 87 17 0 0 204 1 0 0] 34 2 576 2176 2160 nil 27)! !
!JadeNavigationInspector class categoriesFor: #resource_Default_view!public!resources-views! !

!JadePresenter methodsFor!

issueCommand: services
	| stonString stonResultString |
	services do:[:service | service prepareForReplication].
	stonString := STON toString: services.
	[stonResultString := self gciSession serverPerform: #updateFromSton: with: stonString]
		ensure: [services do: [:service | service clearCommand]].
	^self update: services afterStonReplication: stonResultString.! !
!JadePresenter categoriesFor: #issueCommand:!Jadeite!public! !

!JadePresenterA methodsFor!

basicCloneProject: path root: root
	| service |
	service := RowanProjectService new.
	service
		command: #newGitProject:root:useSsh:;
		commandArgs: (Array
					with: path
					with: root
					with: true).
	self issueCommand: (Array with: service)!

basicUpdateServices: services
	| stonString stonResults |
	services do: [:service | service prepareForReplication].
	stonString := STON toString: services.
	stonResults := self gciSession serverPerform: #updateFromSton: with: stonString.
	self update: services afterStonReplication: stonResults!

browseImplementorsOf: aGsMethodOrString
	
	(parentPresenter class = JadeTreeMethodListPresenter) ifTrue: [^parentPresenter browseImplementorsOf: aGsMethodOrString].

	^(JadeiteMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseImplementorsOf: aGsMethodOrString;
		yourself.
!

browseSendersOf: aGsMethodOrString

	(parentPresenter class = JadeTreeMethodListPresenter) ifTrue: [^parentPresenter browseSendersOf: aGsMethodOrString].

	(JadeMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseSendersOf: aGsMethodOrString;
		yourself.
!

clearBreakPointAt: stepPoint in: browser
	| selection |
	selection := self methodListSelection.
	selection
		command: #clearBreakAt:;
		commandArgs: (Array with: stepPoint).
	self issueCommand: (Array with: selection).
	browser updateMethodSource. !

cloneProject
	"Does a clone and 'attach'"

	| filePath |
	filePath := RowanKeyValuePrompter
				on: 'file:$ROWAN_PROJECTS_HOME/Rowan/samples/RowanSample1.ston' -> '$ROWAN_PROJECTS_HOME'
				prompt: 'Please select location of the code repository to clone:'
				caption: 'Clone Git Repository'.
	filePath isNil ifTrue: [^false].
	self basicCloneProject: filePath key root: filePath value!

compilationWarningFrom: methodServices

	methodServices do:[:methodService | 
		methodService compilationWarnings ifNotNil:[:warning | ^warning]].
	^nil!

confirmReloadProjects: selections
	| ws |
	ws := String new writeStream.
	selections do: 
			[:projectService |
			ws
				cr;
				print: projectService name].
	ws
		nextPut: $?;
		cr.
	(MessageBox
		confirm: 'Really load project(s) ' , ws contents , 'This will destroy any changes you may have.')
			ifFalse: [^false].
	^true!

currentMethodSourceFrom: sourceString

	| source fromStream writeStream |
	fromStream := ReadStream on: sourceString.
	writeStream := WriteStream on: String new.
	[
		fromStream atEnd not.
	] whileTrue: [
		| char |
		(char := fromStream next) == Character cr ifTrue: [
			fromStream peek ~~ Character lf ifTrue: [
				writeStream nextPut: Character lf.
			].
		] ifFalse: [
			writeStream nextPut: char.
		].
	].
	source := writeStream contents.
	[
		source last codePoint <= 32.
	] whileTrue: [
		source := source copyFrom: 1 to: source size - 1.
	].
	^source.
!

displayNoMods: sourcePresenter
	sourcePresenter view
		backcolor: JadeTextStyles default colorForNoEdits;
		isModified: false;
		isReadOnly: false.!

editSaveMethod: classService in: methodSourcePresenter category: category
	| caretPosition firstVisibleLine methodSource |
	caretPosition := methodSourcePresenter view caretPosition.
	firstVisibleLine := methodSourcePresenter view lineScroll.
	methodSource := self currentMethodSourceFrom: methodSourcePresenter value.
	classService
		command: #saveMethodSource:category:;
		commandArgs: (Array with: methodSource with: category).
	[self issueCommand: (Array with: classService)] on: GsCompileError
		do: [:ex | ^self reportCompileError: ex list in: methodSourcePresenter].
	methodSourcePresenter view firstVisibleLine: firstVisibleLine.
	methodSourcePresenter view goto: caretPosition.
	methodSourcePresenter value: methodSource.
	self displayNoMods: methodSourcePresenter.
	(self compilationWarningFrom: classService selectedMethods)
		ifNotNil: [:warning | self statusBarText: warning]!

isOkayToChangeSource: methodSourcePresenter
	methodSourcePresenter ensureVisible.
	gciSession isValidSession
		ifTrue: 
			[(MessageBox confirm: 'Stay on unsaved method?' caption: 'Method has unsaved changes!!')
				ifTrue: [^false]]
		ifFalse: 
			[(MessageBox confirm: 'Copy changes to Clipboard?' caption: 'Method has unsaved changes!!')
				ifTrue: 
					[methodSourcePresenter
						selectAll;
						copySelection]].
	methodSourcePresenter view isModified: false.
	^true!

loadProjectsFrom: browser
	| selections |
	selections := browser projectListPresenter selections.
	(self confirmReloadProjects: selections)
		ifTrue: [RowanBrowserService new reloadProjects: selections presenter: self]!

methodListSelection
	
	^self parentPresenter methodListSelection!

refreshBreakPointsIn: methodSourcePresenter
	| indicators selection |
	selection := self methodListSelection.
	methodSourcePresenter view clearContainerIndicators.
	indicators := OrderedCollection new.
	1 to: selection stepPoints size
		do: 
			[:stepPoint |
			| range string styleName |
			range := (selection stepPoints at: stepPoint) key.
			styleName := (selection breakPoints includes: stepPoint) ifTrue: [9] ifFalse: [8].
			string := ((selection breakPoints includes: stepPoint) ifTrue: ['Break at '] ifFalse: [''])
						, 'step point #' , stepPoint printString.
			indicators add: (ScintillaIndicator
						styleName: styleName
						range: range
						tag: string)].
	methodSourcePresenter view indicators: indicators.
	methodSourcePresenter view update. !

removeSelectorsStringUsing: methodListPresenter
	| stream methodServices |
	methodServices := self updateMethodReferences: methodListPresenter selections.
	stream := String new writeStream. 
	methodServices do: 
			[:service |
			stream nextPutAll: service selectorsDisplayString.
			service references notEmpty
				ifTrue: 
					[stream
						nextPutAll: ' (referenced by ';
						nextPutAll: service references size printString;
						nextPutAll: ' methods)'].
			stream cr].
	^stream contents!

reportCompileError: anArrayOfArray in: methodSourcePresenter

	| source position stream string indicators |
	indicators := OrderedCollection new.
	methodSourcePresenter view clearContainerIndicators.
	source := (self currentMethodSourceFrom: methodSourcePresenter value) , Character lf asString.
	position := methodSourcePresenter view caretPosition.
	methodSourcePresenter value: source.
	methodSourcePresenter view caretPosition: position.
	stream := WriteStream on: String new.
	anArrayOfArray do: [:eachArray | 
		| start |
		start := eachArray at: 2.
		string := eachArray at: 3.
		stream nextPutAll: string , '; '.
		indicators add: (ScintillaIndicator
			styleName: 10 
			range: (start to: (start + 10 min: source size)) 
			tag: string).
	].
	methodSourcePresenter view backcolor: JadeTextStyles default colorForCompileError.
	methodSourcePresenter view indicators: indicators.
	string := stream contents.
	self statusBarText: (string copyFrom: 1 to: string size - 2).
!

setBreakPointAt: stepPoint in: browser
	| selection |
	selection := self methodListSelection.
	selection
		command: #setBreakAt:;
		commandArgs: (Array with: stepPoint).
	self issueCommand: (Array with: selection).
	browser updateMethodSource. !

updateMethodReferences: services
	services do: [:service | service command: #allReferences].
	self basicUpdateServices: services.
	^services! !
!JadePresenterA categoriesFor: #basicCloneProject:root:!Jadeite!public! !
!JadePresenterA categoriesFor: #basicUpdateServices:!Jadeite!public! !
!JadePresenterA categoriesFor: #browseImplementorsOf:!public! !
!JadePresenterA categoriesFor: #browseSendersOf:!public! !
!JadePresenterA categoriesFor: #clearBreakPointAt:in:!Jadeite!public! !
!JadePresenterA categoriesFor: #cloneProject!Jadeite!public! !
!JadePresenterA categoriesFor: #compilationWarningFrom:!Jadeite!public! !
!JadePresenterA categoriesFor: #confirmReloadProjects:!Jadeite!public! !
!JadePresenterA categoriesFor: #currentMethodSourceFrom:!Jadeite!public! !
!JadePresenterA categoriesFor: #displayNoMods:!displaying!public! !
!JadePresenterA categoriesFor: #editSaveMethod:in:category:!Jadeite!public! !
!JadePresenterA categoriesFor: #isOkayToChangeSource:!Jadeite!public! !
!JadePresenterA categoriesFor: #loadProjectsFrom:!Jadeite!public! !
!JadePresenterA categoriesFor: #methodListSelection!Jadeite!public! !
!JadePresenterA categoriesFor: #refreshBreakPointsIn:!Jadeite!public! !
!JadePresenterA categoriesFor: #removeSelectorsStringUsing:!Jadeite!public! !
!JadePresenterA categoriesFor: #reportCompileError:in:!Jadeite!public! !
!JadePresenterA categoriesFor: #setBreakPointAt:in:!Jadeite!public! !
!JadePresenterA categoriesFor: #updateMethodReferences:!Jadeite!public! !

!JadeProcessBrowser methodsFor!

debugProcess

	| oop oopType |
	oop := (processesPresenter selection at: 2) asNumber.
	oopType := gciSession oopTypeWithOop: oop.
	RowanDebugger debuggerClass 
		openOn: (GsProcess session: gciSession oopType: oopType) 
		message: 'background process'
		terminateOnClose: false.
! !
!JadeProcessBrowser categoriesFor: #debugProcess!private! !

!JadeServer methodsFor!

_describeMethod: aMethod
	"Provide info needed to create a GsMethod in Jade client"
	"Nice to add packageName and mcTimestamp"

	| allSelectors class list oldGsMethod string methodUpdate |
	methodUpdate := RowanMethodUpdate new method: aMethod. 
	self environment: (self environmentForMethod: aMethod).
		
	methodUpdate 	"Line 1 for GsMethod (line 3 for JadeSystemBrowserPresenter)"
"1"		classOop: (class := aMethod inClass) asOop;
"2"		className: class printString;
"3"		methodOop: aMethod asOop;
"4"		selector: aMethod selector;
"5"		category: (self categoryOfMethod: aMethod);
"6"		isReadOnly: (self currentUserMayEditMethod: aMethod);
			source: aMethod sourceString.

	"unimplemented selectors"			"https://github.com/jgfoster/Jade/issues/117"
	((aMethod class includesSelector: #'_selectorPool') and: [aMethod class includesSelector: #'_sourceOffsetOfFirstSendOf:']) ifTrue: [
		allSelectors := self _allSelectors.
		(aMethod _selectorPool reject: [:each | allSelectors includes: each]) do: [:each | 
			methodUpdate firstSendOffsets at: (aMethod _sourceOffsetOfFirstSendOf: each) put: each.
		].
	].

	"Array of Associations (offset -> selector) indexed by step points"
	list := self sbUpdateMethodStepPointsFor: aMethod.
	list do:[:each | methodUpdate stepPoints at: each key printString put: each value].

	"breaks"
	methodUpdate breakPoints: (self sbUpdateMethodBreakPointsFor: aMethod).

	"original method"
	oldGsMethod := (aMethod inClass class canUnderstand: #'persistentMethodDictForEnv:')
		ifTrue: [(aMethod inClass persistentMethodDictForEnv: 0) at: aMethod selector ifAbsent: [aMethod]]
		ifFalse: [(aMethod inClass class canUnderstand: #'_rawMethodDict')
			ifTrue: [aMethod inClass _rawMethodDict at: aMethod selector ifAbsent: [aMethod]]
			ifFalse: [aMethod]].
	aMethod ~~ oldGsMethod ifTrue: [
		methodUpdate originalMethodSource: oldGsMethod sourceString.
	].

	"method compile warnings"
	string := selections isNil 
		ifTrue: ['']
		ifFalse: [selections at: #'methodWarnings' ifAbsent: ['']].
	string isNil ifTrue: [string := ''].
	methodUpdate compilationWarnings: string.
	methodUpdate writeMethodTo: writeStream.

 
!

sbAddPackage: anOrderedCollection
	| string service |
	string := anOrderedCollection removeFirst.
	selections at: #package put: string.
	service := Rowan packageServiceClass forPackageNamed: string.
	service createPackage.
	self systemBrowserUpdate!

sbChangesInPackage: anOrderedCollection
	"where anOrderedCollection is {packageName, projectName}"

	| patch string packageName url |
	packageName := anOrderedCollection removeFirst.
	url := anOrderedCollection removeFirst.
	patch := Rowan packageTools diff patchForPackageName: packageName.
	string := self
				_mcDescriptionOfPatch: patch
				baseName: 'closest ancestor'
				alternateName: nil.
	writeStream
		nextPutAll: 'changesInPackage';
		lf;
		nextPutAll: string;
		yourself
!

sbClassTemplate
	| def service classInfoUpdate |
	service := Rowan classServiceClass forClassNamed: 'Object'.
	def := service classCreationTemplate.
	classInfoUpdate := RowanClassInfoUpdate new.
	classInfoUpdate 
		oop: 0;
		template: def.
	classInfoUpdate writeInfoOn: writeStream
!

sbRemoveClasses
	| isPackages containers classNames |
	self nextLine = 'packageList'. "ignore this" 
	containers := self nextLineAsList.
	classNames := (self nextLineAsList reject: [:each | each isEmpty])
				collect: [:each | (each subStrings: Character space) first asSymbol].
	containers do: 
			[:packageName |
			classNames
				do: [:className | (Rowan packageServiceClass forPackageNamed: packageName) removeClassNamed: className]].
	^self systemBrowserUpdate!

sbRemoveMethods: anOrderedCollection
	| behavior classEntity  notRemoved|
	behavior := self sbClassFrom: anOrderedCollection.
	classEntity := ((System myUserProfile resolveSymbol: #UserGlobals) value at: #rowanCompile
				ifAbsent: [false])
					ifTrue: [Rowan classServiceClass forClassNamed: behavior name meta: behavior isMeta]
					ifFalse: [behavior].
	notRemoved := Array new. 
	anOrderedCollection do: [:each | classEntity removeSelector: each asSymbol ifAbsent: [notRemoved add: each]].
	self systemBrowserUpdate.
	notRemoved isEmpty ifFalse:[self error: 'The following selectors were not removed. Possibly in a superclass? ', notRemoved printString].!

sbUnloadPackage: anOrderedCollection
	| service |
	service := Rowan packageServiceClass forPackageNamed: anOrderedCollection removeFirst.
	service deletePackage.
	self systemBrowserUpdate!

sbUpdateClassCategories

	| categories selection override categoryUpdate |
	categoryUpdate := RowanClassCategoryUpdate new. 
	categories := Set new.
	classList do: [:each | categories add: each category].
	categoryUpdate categories addAll: categories asSortedCollection.
	categoryUpdate writeCategoriesTo: writeStream.
	selection := self nextLine.
	categoryUpdate selection: selection. 
	(override := selections at: #'category' ifAbsent: [nil]) notNil ifTrue: [selection := override , '-'].
	selection := 1 < selection size 
		ifTrue: [selection copyFrom: 1 to: selection size - 1]
		ifFalse: [''].
	selection notEmpty ifTrue: [
		categories := categories select: [:each | (each copyFrom: 1 to: (each size min: selection size)) = selection].
		categories isEmpty ifTrue: [selection := ''].
		categories notEmpty ifTrue: [
			classList := classList select: [:each | categories includes: each category].
		].
	].
	categoryUpdate writeSelectionTo: writeStream.

!

sbUpdateClassHierarchy

	| currentSelection currentClass  override classHierarchyUpdate |
	
	classHierarchyUpdate := RowanClassHierarchyUpdate new. 
	classList do: [:each | 
		classHierarchyUpdate addHierarchyFor: each
	].
	classHierarchyUpdate writeHierarchyTo: writeStream. 
	"now figure out which class to select"
	currentSelection := self nextLineAsList.
	(override := selections at: #'className' ifAbsent: [nil]) notNil ifTrue: [currentSelection := Array with: override].
	currentSelection isEmpty ifTrue: [
		selectedClass := nil.
	] ifFalse: [
		(currentClass := selections at: #'class' ifAbsent: [nil]) isNil ifTrue: [
			| className |
			className := (currentSelection last subStrings: Character space) first asSymbol.
			selectedClass := classHierarchyUpdate allClasses detect: [:each | each name = className] ifNone:[].
		] ifFalse: [
			selectedClass := nil.
			[
				selectedClass isNil and: [currentClass notNil].
			] whileTrue: [
				selectedClass := classHierarchyUpdate allClasses detect: [:each | each = currentClass] ifNone:[].
				currentClass := currentClass superclass.
			].
		].
	].
	classHierarchyUpdate addSelectionHierarchyFor: selectedClass.
	classHierarchyUpdate writeSelectionHierarchyTo: writeStream.
	classHierarchyUpdate writeTestCaseInfoTo: writeStream.


!

sbUpdateClassInfo
	| classComment classInfoUpdate |
	selectedClass isNil ifTrue: [^self sbClassTemplate].
	classInfoUpdate := RowanClassInfoUpdate new. 
	classInfoUpdate oop: (self oopOf: selectedClass).
	classInfoUpdate template: (Rowan classServiceClass forClassNamed: selectedClass name)
							classCreationTemplate.
	classInfoUpdate category: ((classInfoUpdate template includesString: 'category: ''')
					ifFalse: [' category: ' , selectedClass category printString]).
	(selectedClass class canUnderstand: #comment)
		ifTrue: [classComment := selectedClass comment]
		ifFalse: 
			[(selectedClass class canUnderstand: #description)
					ifTrue: 
						[| description |
						description := selectedClass description.
						description class name = #GsClassDocumentation
							ifTrue: [classComment := description detailsAboutClass]]].
	classComment isNil ifTrue: [classComment := ''].
	classInfoUpdate comment: classComment. 
	classInfoUpdate writeInfoOn: writeStream.
!

sbUpdateClassList

	| mySelections override classesUpdate |
	classesUpdate := RowanClassesUpdate new. 
	(classList asSortedCollection: [:a :b | a name <= b name]) do: [:eachClass | 
		classesUpdate classNames add: eachClass name. 
	].
	classesUpdate writeClassesTo: writeStream. 
	mySelections := self nextLineAsList collect: [:each | (each subStrings: Character space) first asSymbol].
	(override := selections at: #'className' ifAbsent: [nil]) notNil ifTrue: [mySelections := Array with: override].
	mySelections := classList select: [:eachClass | mySelections includes: eachClass name].
	mySelections do: [:eachClass | 
		classesUpdate selections add: eachClass asString].
	classesUpdate writeSelectionsTo: writeStream. 
	classesUpdate writeTestCaseInfoTo: writeStream. 
	selectedClass := mySelections size = 1
		ifTrue: [mySelections first]
		ifFalse: [nil].
!

sbUpdateDictionaries

	| override packagePolicy home symbolList oldSelections newSelections fullList globals dictionaryUpdate globalsUpdate |
	dictionaryUpdate := RowanDictionaryUpdate new. 
	oldSelections := self nextLineAsList.
	(override := selections at: #'dictionary' ifAbsent: [nil]) notNil ifTrue: [oldSelections := Array with: override].
	symbolList := self symbolList.
	(packagePolicy := self gsPackagePolicy) notNil  ifTrue: [
		home := packagePolicy homeSymbolDict.
	].
	fullList := symbolList collect: [:each | 
		| hvName | 
		hvName := (each == home ifTrue: ['H'] ifFalse: ['V']) , each name.
		dictionaryUpdate dictionaries add: hvName.
		hvName.
		].
	dictionaryUpdate writeDictionariesTo: writeStream.
	fullList := fullList collect: [:each | each copyFrom: 2 to: each size].
	newSelections := oldSelections select: [:each | fullList includes: each].
	globals := Dictionary new.
	newSelections do: [:eachName | 
		| symbolDictionary globalKeyPrefix |
		globalKeyPrefix := 1 < newSelections size ifTrue: [eachName , '.'] ifFalse: [''].
		dictionaryUpdate selections add: eachName asString.
		symbolDictionary := symbolList at: (fullList indexOf: eachName).
		symbolDictionary keys asSortedCollection do: [:eachKey |
			| eachGlobal |
			eachGlobal := symbolDictionary at: eachKey.
			(eachGlobal isBehavior and: [eachGlobal name == eachKey])
				ifTrue: [classList add: eachGlobal]
				ifFalse: [globals at: globalKeyPrefix , eachKey put: (symbolDictionary associationAt: eachKey)].
		].
	].
	dictionaryUpdate writeSelectionsTo: writeStream. 
	globalsUpdate := RowanGlobalsUpdate new. 
	globals keys asSortedCollection do: [:eachKey | 
		| eachAssociation eachValue string globalsArray |
		eachAssociation := globals at: eachKey.
		eachValue := eachAssociation value.
		string := self asString: eachValue.
		100 < string size ifTrue: [string := string copyFrom: 1 to: 100].
		string := string collect: [:char | (char asciiValue < 32 or: [127 < char asciiValue]) ifTrue: [$.] ifFalse: [char]].
		string := String withAll: string asArray.
		globalsArray := Array new. 
		globalsArray add: eachKey;
						add: eachValue _class name;
						add: string;
						add: (self oopOf: eachValue) printString;
						add: (self oopOf: eachAssociation) printString.
		globalsUpdate globals add: globalsArray. 
	].
	globalsUpdate writeGlobalsTo: writeStream.
	

!

sbUpdateMethodCategories

	| methodUpdate | 
	methodUpdate := RowanMethodsUpdate new.  
	methodUpdate classNamesFrom: classList. 
	methodUpdate updateMethodCategories; 
		writeMethodCategoriesTo: writeStream. 
	methodUpdate updateMethodSelections: self nextLineAsList 
			hasCategoryOverride: (selections at: #'methodCategory' ifAbsent: [nil]).
	methodFilters := methodUpdate methodFilters.
	methodUpdate writeSelectionsTo: writeStream. !

sbUpdateMethods

	| selectors methodUpdate |
	selectedClass isNil ifTrue: [^self].
	methodUpdate := RowanMethodsUpdate new selectedClass: selectedClass.
	methodFilterType = 'categoryList' ifTrue: [selectors := self sbUpdateMethodsByCategories] ifFalse: [
	methodFilterType = 'variableList' ifTrue: [selectors := self sbUpdateMethodsByVariables] ifFalse: [
	methodFilterType = 'pragmaList' ifTrue: [selectors := self sbUpdateMethodsByPragmas] ifFalse: [
		self error: 'Unrecognized methodFilterType: ' , methodFilterType printString]]].
	methodUpdate selectors: selectors asSortedCollection.
	methodUpdate updateMethodsInfo.
	methodUpdate writeMethodsTo: writeStream. 
	self sbUpdateMethodSelectionsIn: methodUpdate
!

sbUpdateMethodVariables

	| methodUpdate |
	methodUpdate := RowanMethodsUpdate new. 
	methodUpdate classNamesFrom: classList. 
	methodUpdate updateMethodVariables. 
	methodUpdate writeMethodFiltersTo: writeStream. 
	methodUpdate updateMethodSelections: self nextLineAsList 
		hasCategoryOverride: (selections at: #'methodCategory' ifAbsent: [nil]).
	methodFilters := methodUpdate methodFilters.
	methodUpdate writeSelectionsTo: writeStream. 

!

sbUpdatePackages
	| override modifiedList oldSelections newSelections fullList packagesUpdate |
	
	packagesUpdate := RowanPackageUpdate new. 
	oldSelections := self nextLineAsList.
	(override := selections at: #package ifAbsent: [nil]) notNil
		ifTrue: [oldSelections := Array with: override].
	fullList := Rowan serviceClass new rowanLoadedPackageNames subStrings: Character lf.
	fullList := fullList reject: [:each | each isEmpty].
	fullList := fullList asSortedCollection asArray.
	fullList := fullList collect: [:each | each subStrings: Character tab].
	fullList := fullList reject: [:each | each isEmpty].
	modifiedList := (fullList select: [:each | (each at: 2) = 'Y']) collect: [:each | each at: 3].
	fullList := fullList collect: [:each | each at: 3].
	packagesUpdate modifiedPackages addAll: modifiedList. 
	packagesUpdate packages addAll: fullList. 
	packagesUpdate writePackagesTo: writeStream. 
	packagesUpdate writeModifiedPackagesTo: writeStream. 
	newSelections := oldSelections select: [:each | fullList includes: each].
	(newSelections isEmpty and: [oldSelections size = 1])
		ifTrue: 
			[newSelections := fullList
						select: [:each | (oldSelections first copyFrom: 1 to: (oldSelections first size min: each size)) = each]].
	newSelections do: 
			[:each |
			| service |
			packagesUpdate selections add: each asString. 
			service := Rowan packageServiceClass forPackageNamed: each.
			classList addAll: service loadedClassHandles].
	packagesUpdate writeSelectionsTo: writeStream.
	newSelections size = 1 ifTrue: [self sbUpdatePackage: newSelections first]
!

sbUpdateSuperclass

	| class tabName selected index superclassUpdate |
	superclassUpdate := RowanSuperclassUpdate new.
	tabName := self nextLine. 
	(#('default' 'instanceTab' 'classTab') includes: tabName) ifFalse: [self error: 'Unexpected token!!'].
	tabName = 'default' ifTrue: [
		tabName := (selectedClass notNil and: [selectedClass selectors isEmpty and: [selectedClass class selectors notEmpty]]) 
			ifTrue: ['classTab']
			ifFalse: ['instanceTab'].
	].
	superclassUpdate tabName: tabName. 
	superclassUpdate writeTabNameTo: writeStream.
	selectedClass notNil ifTrue: [
		selectedClass := tabName = 'instanceTab'
			ifTrue: [selectedClass]
			ifFalse: [selectedClass class].
	].
	class := selectedClass.
	classList := OrderedCollection new.
	[
		class notNil.
	] whileTrue: [
		classList add: class.
		superclassUpdate classNames add: class name. 
		class := self environmentSuperClassFor: class.
	].
	superclassUpdate writeClassesTo: writeStream.
	classList := classList reverse.
	selected := self nextLine.
	index := classList findFirst: [:each | each name asString = selected].
	index = 0 ifTrue: [index := classList size].
	0 < index ifTrue: [classList := classList copyFrom: index to: classList size].
	classList notEmpty ifTrue: [
		selectedClass := classList first.
		superclassUpdate selections add: selectedClass asString.
	].
	superclassUpdate writeSelectionsTo: writeStream. 
!

systemBrowserSTONA: aString

	| time |
	time := self millisecondsElapsedTime: [
		selections := Dictionary new.
		readStream := ReadStream on: aString.
		writeStream := WriteStream on: String new.
		writeStream lf.
		self environment: (readStream upTo: Character space) asNumber.
		self systemBrowserCommand.
	].
	^STON toString: RowanCommandResult results
! !
!JadeServer categoriesFor: #_describeMethod:!Debugger!GsObject!public!System Browser! !
!JadeServer categoriesFor: #sbAddPackage:!public!System Browser! !
!JadeServer categoriesFor: #sbChangesInPackage:!public!System Browser! !
!JadeServer categoriesFor: #sbClassTemplate!public!System Browser! !
!JadeServer categoriesFor: #sbRemoveClasses!public!System Browser! !
!JadeServer categoriesFor: #sbRemoveMethods:!public!System Browser! !
!JadeServer categoriesFor: #sbUnloadPackage:!public!System Browser! !
!JadeServer categoriesFor: #sbUpdateClassCategories!public!System Browser! !
!JadeServer categoriesFor: #sbUpdateClassHierarchy!public!System Browser! !
!JadeServer categoriesFor: #sbUpdateClassInfo!public!System Browser! !
!JadeServer categoriesFor: #sbUpdateClassList!public!System Browser! !
!JadeServer categoriesFor: #sbUpdateDictionaries!public!System Browser! !
!JadeServer categoriesFor: #sbUpdateMethodCategories!public!System Browser! !
!JadeServer categoriesFor: #sbUpdateMethods!public!System Browser! !
!JadeServer categoriesFor: #sbUpdateMethodVariables!public!System Browser! !
!JadeServer categoriesFor: #sbUpdatePackages!public!System Browser! !
!JadeServer categoriesFor: #sbUpdateSuperclass!public!System Browser! !
!JadeServer categoriesFor: #systemBrowserSTONA:!public!System Browser! !

!JadeServer class methodsFor!

gsString
"
	JadeServer64bit3x gsString.
"
	| stream |
	SessionManager current isRuntime ifTrue: [^gsString].
	(stream := WriteStream on: String new)
		nextPutAll: '| class mcPlatformSupport methodClass readStream result server source symbolList writeStream |'; lf;
		nextPutAll: 'methodClass := ';
		nextPutAll: self gsMethodClassName;
		nextPut: $.; lf;
		nextPutAll: 'symbolList := System myUserProfile symbolList.'; lf;
		
		" These lines force OtherPassword setting to be enabled to run Jadeite. (OtherPassword is required to change another symbol list.
		nextPutAll: 'symbolList := (AllUsers userWithId: ''DataCurator'') symbolList.'; lf;
		nextPutAll: 'symbolList := symbolList class new add: (symbolList detect: [:each | each name == #UserGlobals]); add: (symbolList detect: [:each | each name == #Globals]); yourself.'; lf;"

		nextPutAll: '[class := symbolList objectNamed: #Object.'; lf;
		yourself.
	"(self withAllSuperclasses remove: Object; yourself) reverseDo: [:eachClass | self addGsStringForClass: eachClass to: stream]."
	stream 
		nextPutAll: '(mcPlatformSupport := symbolList objectNamed: #''MCPlatformSupport'') notNil ifTrue: ['; lf;
		nextPutAll: '	mcPlatformSupport autoCommit: false; autoMigrate: false].'; lf;
		nextPutAll: 'class := ((symbolList objectNamed: #System) myUserProfile symbolList objectNamed: #UserGlobals) at: #' , self name , ' ifAbsent: [class].'; lf;
		nextPutAll: 'server := class new initialize; yourself.'; lf;
		nextPutAll: self sessionStateCode; lf;
		nextPutAll: 'server] on: (symbolList objectNamed: #Error) do: [:ex | ex return: ''ERROR: '' , (GsProcess stackReportToLevel: 100)]';
		yourself.
	gsString := stream contents.
	^gsString.
! !
!JadeServer class categoriesFor: #gsString!public! !

!JadeServer64bit methodsFor!

recompile: aMethod withSource: aString
	| result behavior |
	behavior := aMethod inClass.
	((System myUserProfile resolveSymbol: #UserGlobals) value at: #rowanCompile ifAbsent: [false])
		ifTrue: 
			[behavior rwCompileMethod: aString
				category: (self _behavior: behavior categoryOfSelector: aMethod selector).
			Rowan serviceClass rowanFixMe.	"need to handle compile errors"
			^true]
		ifFalse: 
			[result := aMethod _recompileWithSource: aString.
			result isNil ifTrue: [^true].	"Bug 41195 returns nil if success so assume it is the same method"
			^result]!

systemBrowserSTON: aString

	[
		^super systemBrowserSTON: aString.
	] on: Error do: [:ex |
		readStream := nil.
		ex pass.
	].
! !
!JadeServer64bit categoriesFor: #recompile:withSource:!Debugger!public! !
!JadeServer64bit categoriesFor: #systemBrowserSTON:!public!System Browser! !

!JadeServer64bit32 class methodsFor!

gsClassDefinitionStringFor: aClass
	"Some class variables exist only in Dolphin and map to globals in GemStone; others exist only in GemStone and map to globals in Dolphin!!"

	^'class subclass: ''' , aClass name , '''
		instVarNames: ' , aClass instVarNames printString , '
		classVars: #(' , aClass classVarsForGemStone , ')
		classInstVars: #()
		poolDictionaries: (#() class withAll: symbolList)
		inDictionary: UserGlobals.'
! !
!JadeServer64bit32 class categoriesFor: #gsClassDefinitionStringFor:!public! !

!JadeServer64bit3x methodsFor!

compileMethod: methodString behavior: aBehavior symbolList: aSymbolList inCategory: categorySymbol
	"returns (nil -> anArrayOfErrors) or (aGsNMethod -> compilerWarnings) or (aGsNMethod -> nil)"

	| method warnings | 

	[[((System myUserProfile resolveSymbol: #UserGlobals) value at: #rowanCompile ifAbsent:[false]) ifTrue:[
			method := aBehavior rwCompileMethod: methodString category: categorySymbol]
		ifFalse:[
			method := aBehavior
			compileMethod: methodString
			dictionaries: aSymbolList
			category: categorySymbol
			environmentId: environment].
	] on: CompileError do: [:ex |
		^nil -> (ex gsArguments at: 1)
	]] on: CompileWarning do: [:ex |
		warnings := ex gsArguments at: 1.
		ex resume.
	].
	^[	
		(self compiledMethodAt: method key selector inClass: aBehavior) -> warnings.
	] on: Error do: [:ex | 
		ex return: method -> warnings.
	].
!

sbClassComment: anOrderedCollection

	(self sbClassFrom: anOrderedCollection) thisClass rwComment: self sbNextParagraph trimSeparators.
	self systemBrowserUpdate.
!

sbUpdateMethodPragmas

	| methodUpdate |
	methodUpdate := RowanMethodsUpdate new. 
	selectedClass notNil ifTrue:[
		methodUpdate selections add: selectedClass asString].
	methodUpdate updateMethodPragmas.
	methodUpdate writeMethodFiltersTo: writeStream. 
	methodUpdate updateMethodSelections: self nextLineAsList 
		hasCategoryOverride: (selections at: #'methodCategory' ifAbsent: [nil]).
	methodFilters := methodUpdate methodFilters.
	methodUpdate writeSelectionsTo: writeStream. 

! !
!JadeServer64bit3x categoriesFor: #compileMethod:behavior:symbolList:inCategory:!Methods!public!System Browser! !
!JadeServer64bit3x categoriesFor: #sbClassComment:!public!System Browser! !
!JadeServer64bit3x categoriesFor: #sbUpdateMethodPragmas!public!System Browser! !

!JadeSessionManager class methodsFor!

getUrl
	"no longer sent, but might be handy to have"

	| string |
	string := [SessionManager current class git: 'config --get remote.origin.url']
				on: ExternalProcessExecuteError
				do: [:ex | ^'???'].
	^(ReadStream on: string) nextLine!

mainShellClass

	^RowanLoginShell.
!

setVersion

	Version := self getVersion.! !
!JadeSessionManager class categoriesFor: #getUrl!public! !
!JadeSessionManager class categoriesFor: #mainShellClass!public! !
!JadeSessionManager class categoriesFor: #setVersion!public! !

!JadeSystemBrowserPresenter methodsFor!

basicAddMethodCategory: string
	| stream |
	stream := (WriteStream on: String new)
				nextPutAll: 'addMethodCategory';
				tab;
				nextPutAll: self selectedClassNameWithoutVersion;
				tab;
				nextPutAll: selectedClassOop printString;
				tab;
				nextPutAll: instanceClassTabs currentCard name;
				tab;
				nextPutAll: string;
				tab;
				lf;
				yourself.
	self updateCommand: stream contents , self requestString
		onSuccessDo: [methodSourcePresenter ensureVisible]!

basicRemoveMethods
	| string |
	string := 'removeMethods' , Character tab asString , self methodsIdentifier , Character lf asString
				, self requestString.
	self updateCommand: string!

browseClassReferences
	self browseClassReferences: (classListPresenter selectionIfNone: [^self])!

browseClassReferences: className
	| service |
	service := RowanQueryService command: #browseClassReferences: withArgs: (Array with: className).
	self issueCommand: (Array with: service).
	self openMethodListOn: service selecting: className!

browseImplementorsOf: string
	| service |
	service := RowanQueryService command: #implementorsOf: withArgs: (Array with: string asSymbol).
	self issueCommand: (Array with: service).
	self openMethodListOn: service selecting: string!

browseMethodsAndSelect: aString

	(JadeiteMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseMethodsFromString: readStream upToEnd methodName: aString;
		selecting: aString.
!

browseMethodsAndSelect: aString type: browseType

	(JadeiteMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseMethodsFromString: readStream upToEnd methodName: aString type: browseType;
		selecting: aString.
!

browseMethodsContaining

	| string service |
	(string := Prompter prompt: 'Enter string:') isNil ifTrue: [^self].
	service := RowanQueryService command: #methodsContaining:
				withArgs: (Array with: string).
	self issueCommand: (Array with: service).
	self openMethodListOn: service selecting: string
	!

browseSendersOf: string
	| service |
	service := RowanQueryService command: #sendersOf: withArgs: (Array with: string asSymbol).
	self issueCommand: (Array with: service).
	self openMethodListOn: service selecting: string!

createSchematicWiring
	super createSchematicWiring.
	self
		getViews;
		createSchematicWiringForClassList;
		createSchematicWiringForClassHierarchy;
		createSchematicWiringForClassHierarchyTabs;
		createSchematicWiringForMethodList;
		createSchematicWiringForDictionaryList;
		createSchematicWiringForPackageList;
		createSchematicWiringForPackageDictionaryTabs;
		createSchematicWiringForPragmaList;
		createSchematicWiringForMethodSource;
		createSchematicWiringForClassDefinition;
		createSchematicWiringForMethodCategoryList;
		createSchematicWiringForVariableList;
		createSchematicWiringForClassCategoryList;
		createSchematicWiringForSuperClassList;
		createSchematicWiringForOverrideList;
		createSchematicWiringForInstanceClassTabs;
		yourself.
	textAreaTabs
		when: #currentCardChanged
		send: #textTabChanged
		to: self.
	methodFilterTabs
		when: #currentCardChanging:
			send: #aboutToChange:
			to: self;
		when: #currentCardChanged
			send: #updateAndSelect:
			to: self
			with: classDefinitionPresenter.
	globalsPresenter
		when: #actionPerformed
		send: #inspectGlobal
		to: self!

createSchematicWiringForClassHierarchyTabs
	!

currentMethodSource
	^self currentMethodSourceFrom: methodSourcePresenter value!

editSaveClass
	| string stream flag |
	string := classDefinitionPresenter value
				collect: [:each | each codePoint < 32 ifTrue: [Character space] ifFalse: [each]].
	stream := (WriteStream on: String new)
				nextPutAll: 'class';
				tab;
				nextPutAll: string;
				lf;
				yourself.
	flag := false.
	
	[self updateCommand: stream contents , self requestString
		onSuccessDo: 
			[classDefinitionPresenter view isModified: false.
			flag := true]]
			on: GsCompileError
			do: 
				[:ex |
				string := self handleClassCompileError: ex.
				^self].
	flag ifTrue: [self editSaveClassA]!

handleClassCompileError: ex
	| offset string explanation |
	offset := ex list first at: 2.
	explanation := ex list first at: 3.
	string := classDefinitionPresenter value.
	string := (string copyFrom: 1 to: offset - 1) , ' ' , explanation , ' '
				, (string copyFrom: offset to: string size).
	classDefinitionPresenter
		value: string;
		selectionRange: (offset to: offset + explanation size + 1);
		yourself.
	^string!

methodsMenuStrings

	false ifTrue: [	"This helps us find senders"
		self browseImplementors; browseImplementorsOf; browseSenders; browseSendersOf; browseMethodsContaining; browseMethodPragmas; removeMethods; runMethodTests; setEnvironment0; setEnvironment1; setEnvironment2; fileOutMethod.
	].
	^#(
		'&Methods'
		'Browse &Implementors//browseImplementors'
		'Browse Implementors of ...//browseImplementorsOf'
		'Browse &Senders//browseSenders'
		'Browse Senders of ...//browseSendersOf'
		'-'
		'Browse Methods &Containing ...//browseMethodsContaining'
		'&File out method ...//fileOutMethod'
		'-'
		'&Remove Method(s) ...//removeMethods'
		#('&Method Environment' '&0//setEnvironment0' '&1//setEnvironment1' '&2//setEnvironment2')
		'Run &Tests//runMethodTests'
	).
!

methodSourceEqual
	^methodSourcePresenter value = methodSource!

onViewOpened 
	super onViewOpened.
	categoryListPresenter view contextMenu: (Menu fromStrings: self categoriesMenuStrings).
	classCommentPresenter view isReadOnly: false.
	classHierarchyPresenter view contextMenu: (Menu fromStrings: self classesMenuStrings).
	classListPresenter view contextMenu: (Menu fromStrings: self classesMenuStrings).
	dictionaryListPresenter view contextMenu: (Menu fromStrings: self dictsMenuStrings).
	globalsPresenter view contextMenu: (Menu fromStrings: self globalsMenuStrings).
	methodListPresenter view contextMenu: (Menu fromStrings: self methodsMenuStrings).
	methodSourcePresenter view
		contextMenu: (Menu fromStrings: self editMenuStrings);
		isBackgroundDwellEnabled: true;
		isBraceHighlightingEnabled: true;
		yourself.
	variableListPresenter view contextMenu: (Menu fromStrings: self variablesMenuStrings).
	self setSearchPolicy.
	!

openMethodListOn: service selecting: string
	(JadeiteMethodListBrowser showOnSession: self gciSession) primaryPresenter
		methods: service queryResults
		selecting: string!

packageTabName

	^'Packages'!

postOkToChangeEvent
!

preRemoveMethods
	| stream |
	stream := WriteStream on: String new.
	methodListPresenter selections do: 
			[:each |
			stream
				nextPutAll: each first;
				cr].
	^stream contents!

queryCommand: aCommandQuery

	| command focusView isTextEdit |
	command := aCommandQuery command.
	focusView := View focus.
	isTextEdit := focusView isKindOf: TextEdit.
	(#(#'browseMethodPragmas') includes: command) ifTrue: [aCommandQuery isEnabled: gciSession gsHasPragmas. ^true].
	(#(#'editSave') includes: command) ifTrue: [aCommandQuery isEnabled: (isTextEdit and: [focusView isModified]). ^true].
	(#(#'editUndo') includes: aCommandQuery command) ifTrue: [aCommandQuery isEnabled: (isTextEdit and: [focusView canUndo]). ^true].
	(#(#'editRedo') includes: aCommandQuery command) ifTrue: [aCommandQuery isEnabled: (isTextEdit and: [focusView canRedo]). ^true].
	(#(#'editCut' #'editCopy' "#'editDelete'" ) includes: aCommandQuery command) ifTrue: [aCommandQuery isEnabled: (isTextEdit and: [focusView hasSelection]). ^true].
	(#(#'editPaste') includes: aCommandQuery command) ifTrue: [aCommandQuery isEnabled: (isTextEdit and: [Clipboard current isTextAvailable]). ^true].
	(#(#'addRepository') includes: command) ifTrue: [aCommandQuery isEnabled: packageListPresenter selections notEmpty. ^true].
	(#(#'showPackageChanges') includes: command) ifTrue: [
		aCommandQuery isEnabled: true . ^true].
	(#(#'savePackage') includes: command) ifTrue: [aCommandQuery isEnabled: packageListPresenter selections size = 1. ^true].
	(#(#'removeRepository') includes: command) ifTrue: [
		aCommandQuery isEnabled: (repositoryListPresenter hasSelection and: [packageListPresenter selections size = 1]). ^true].
	(#(#'compareAncestor') includes: command) ifTrue: [
		aCommandQuery isEnabled: (packageListPresenter selections size = 1 and: [ancestorListPresenter hasSelection]). ^true].
	(#(#'browseMethodHistory' #'browseImplementors' #'browseSenders' #'fileOutMethod') includes: command) ifTrue: [
		aCommandQuery isEnabled: methodListPresenter selections size = 1. ^true].
	(#(#'inspectGlobal' #'browseGlobalReferences') includes: command) ifTrue: [aCommandQuery isEnabled: globalsPresenter selections size = 1. ^true].
	(#(#'removeGlobals') includes: command) ifTrue: [aCommandQuery isEnabled: globalsPresenter selections notEmpty. ^true].
	(#(#'fileOutDictionary' ) includes: command) ifTrue: [aCommandQuery isEnabled: dictionaryListPresenter selections size = 1. ^true].
	(#(#'setHomeDictionary') includes: command) ifTrue: [aCommandQuery isEnabled: (dictionaryListPresenter selections size = 1 and: [dictionaryListPresenter selection value not]). ^true].
	(#(#'runMethodTests') includes: command) ifTrue: [aCommandQuery isEnabled: (methodListPresenter selections notEmpty and: [methodListPresenter selections first at: 3]). ^true].
	(#(#'loadLatestVersion') includes: command) ifTrue: [
		aCommandQuery isEnabled: (packageListPresenter selections notEmpty and: [packageListPresenter selections allSatisfy: [:each | each key beginsWith: 'ConfigurationOf']]). ^true].
	(#(#'browseClassReferences' #'fileOutClass' #'addSubclass' #'addMissingAccessors' #'removeClass' #'removePriorVersions') includes: command) ifTrue: [
		aCommandQuery isEnabled: self selectedClasses size == 1. ^true.
	].
	(#(#'runClassTests') includes: command) ifTrue: [aCommandQuery isEnabled: selectedClassesAreTestCases. ^true].
	(#(#'browseSelectedClass') includes: command) ifTrue: [aCommandQuery isEnabled: self isClassSelectedInEditor. ^true].

	(command == #historyBack) ifTrue: [aCommandQuery isEnabled: self hasCommandHistoryBack. ^true].
	(command == #historyForward) ifTrue: [aCommandQuery isEnabled: self hasCommandHistoryForward. ^true].

	(command == #'setEnvironment0' and: [environment == 0]) ifTrue: [aCommandQuery isChecked: true. ^true].
	(command == #'setEnvironment1' and: [environment == 1]) ifTrue: [aCommandQuery isChecked: true. ^true].
	(command == #'setEnvironment2' and: [environment == 2]) ifTrue: [aCommandQuery isChecked: true. ^true].

	^super queryCommand: aCommandQuery.
!

removeMethods
	| result confirmationString |
	confirmationString := self removeSelectorsStringUsing: self methodListPresenter.
	result := MessageBox confirm: confirmationString caption: 'Remove the following method(s)?'.
	result ifFalse: [^self].
	self basicRemoveMethods!

runClassTests

	| stream string list caption selection |
	stream := (WriteStream on: String new)
		nextPutAll: self behaviorIdentifier;
		yourself.
	string := self gciSession 
		serverPerform: #'sbRunClassTests:' 
		with: stream contents.
	string isNil ifTrue: [self error: 'Test run did not return expected value!!'. ^self].
	list := string subStrings: Character lf.
	list size = 1 ifTrue: [
		MessageBox notify: list first.
		^self.
	].
	caption := list first.
	list := list copyFrom: 2 to: list size.
	list := list asSortedCollection.
	selection := SUnitResultDialog showModalOn: (Array with: self gciSession with: caption with: list).
	selection isNil ifTrue: [^self].
	[
		self gciSession executeString: selection.
	] on: GsError do: [:ex | 
		RowanDebugger debuggerClass openDebuggerOnException: ex.
	].
!

savePackage

	| package string array dict stream |
	self rowanFixMe. "Eventually, this would be nice to have." 
	true ifTrue:[^MessageBox notify: 'This functionality is not available. Commit your changes at the project level.'].
	package := packageListPresenter selections first.
	string := self updateCommand: 'uniqueVersionName' , Character tab asString , package key.
	string = 'uniqueVersionName' ifFalse: [self error: 'Unrecognized response'].
	string := readStream nextLine.
	array := ancestorListPresenter list.
	array := array isEmpty 
		ifTrue: [#('' '' '' '')]
		ifFalse: [array first].
	dict := Dictionary new
		at: #'httpPassword'		put: '';
		at: #'httpUser'			put: '';
		at: #'name' 			put: package key;
		at: #'isModified'			put: package value;
		at: #'nextVersionName'	put: string;
		at: #'priorVersionName'	put: (array at: 2);
		at: #'versionMessage'		put: (array at: 4);
		at: #'repositoryList'		put: repositoryListPresenter list;
		at: #'repository'			put: (repositoryListPresenter selectionIfNone: [repositoryListPresenter model last]);
		yourself.
	(RowanSavePackageDialog showModalOn: dict) isNil ifTrue: [^self].
	stream := (WriteStream on: String new)
		nextPutAll: 'savePackage'; tab;
		nextPutAll: package key; tab;
		nextPutAll: ((dict at: #'repository') at: 2); tab;
		nextPutAll: (dict at: #'versionName'); tab;
		nextPutAll: (dict at: #'httpUser'); tab;
		nextPutAll: (dict at: #'httpPassword'); lf;
		nextPutAll: ((dict at: #'versionMessage') reject: [:char | char = Character cr]); lf;
		nextPut: $%; lf;
		nextPutAll: self requestString;
		yourself.
	self updateCommand: stream contents.
!

selectorsString
	^(methodListPresenter selections collect: [:each | each first]) printString!

updateMethod
	| gsMethod isReadOnly listModel methodSourceLabel newSource warnings x |
	methodSourcePresenter view cancelCallTip.
	gsMethod := GsMethod fromStream: readStream session: gciSession.
	isReadOnly := gsMethod isReadOnly.	"current user has write permission for the class"
	newSource := gsMethod source.
	methodSourcePresenter view isModified
		ifTrue: 
			[newSource = methodSource ifTrue: [^self].
			(MessageBox confirm: 'Copy changes to clipboard?' caption: 'Method has unsaved changes!!')
				ifTrue: [methodSourcePresenter value copyToClipboard]].
	methodSource := newSource.
	methodSourcePresenter value: methodSource.
	unimplementedSelectors := gsMethod unimplementedSelectors.
	stepPoints := gsMethod stepPoints.
	breakPoints := gsMethod breakPoints.
	self updateMethodStepPoints.
	methodSourcePresenter view
		backcolor: JadeTextStyles default colorForNoEdits;
		isModified: false;
		isReadOnly: isReadOnly;
		yourself.
	(overrideListPresenter list notEmpty
		and: [overrideListPresenter selectionOrNil ~= overrideListPresenter list last])
			ifTrue: 
				[methodSourcePresenter view
					backcolor: nil;
					isReadOnly: true;
					yourself].
	((methodCategory := gsMethod category) notEmpty and: [self isCategoriesTabSelected])
		ifTrue: 
			[| fullList selections index newName |
			fullList := categoryListPresenter list.
			selections := categoryListPresenter selections.
			0 < (index := fullList indexOf: methodCategory)
				ifTrue: 
					[fullList at: index put: (newName := ' ' , methodCategory).
					categoryListPresenter list: fullList.
					0 < (index := selections indexOf: methodCategory)
						ifTrue: 
							[selections at: index put: newName.
							categoryListPresenter selections: selections].
					categoryListPresenter view invalidate]].
	listModel := (textAreaTabs subViews detect: [:each | each class == TabViewXP]) model.
	originalSourceLabel
		ifNil: [originalSourceLabel := listModel detect: [:each | each text = 'Original Source']].
	methodSourceLabel := listModel detect: [:each | each text = 'Method Source'].
	(x := gsMethod originalSource) isEmpty
		ifTrue: [listModel remove: originalSourceLabel ifAbsent: []]
		ifFalse: 
			[(listModel includes: originalSourceLabel)
				ifFalse: [listModel add: originalSourceLabel before: methodSourceLabel].
			originalSourcePresenter value: x].
	(warnings := gsMethod warnings) notEmpty
		ifTrue: [MessageBox warning: warnings caption: 'Jade Compile Warning']!

updateSelector
	| gsMethod isReadOnly listModel methodSourceLabel newSource warnings x |
	methodSourcePresenter view cancelCallTip.
	gsMethod := GsMethod fromStream: readStream session: gciSession.
	isReadOnly := gsMethod isReadOnly.	"current user has write permission for the class"
	newSource := gsMethod source.
	methodSourcePresenter view isModified
		ifTrue: 
			[newSource = methodSource ifTrue: [^self].
			(MessageBox confirm: 'Copy changes to clipboard?' caption: 'Method has unsaved changes!!')
				ifTrue: [methodSourcePresenter value copyToClipboard]].
	methodSource := newSource.
	methodSourcePresenter value: methodSource.
	unimplementedSelectors := gsMethod unimplementedSelectors.
	stepPoints := gsMethod stepPoints.
	breakPoints := gsMethod breakPoints.
	self updateMethodStepPoints.
	methodSourcePresenter view
		backcolor: JadeTextStyles default colorForNoEdits;
		isModified: false;
		isReadOnly: isReadOnly;
		yourself.
	(overrideListPresenter list notEmpty
		and: [overrideListPresenter selectionOrNil ~= overrideListPresenter list last])
			ifTrue: 
				[methodSourcePresenter view
					backcolor: nil;
					isReadOnly: true;
					yourself].
	((methodCategory := gsMethod category) notEmpty and: [self isCategoriesTabSelected])
		ifTrue: 
			[| fullList selections index newName |
			fullList := categoryListPresenter list.
			selections := categoryListPresenter selections.
			0 < (index := fullList indexOf: methodCategory)
				ifTrue: 
					[fullList at: index put: (newName := ' ' , methodCategory).
					categoryListPresenter list: fullList.
					0 < (index := selections indexOf: methodCategory)
						ifTrue: 
							[selections at: index put: newName.
							categoryListPresenter selections: selections].
					categoryListPresenter view invalidate]].
	listModel := (textAreaTabs subViews detect: [:each | each class == TabViewXP]) model.
	originalSourceLabel
		ifNil: [originalSourceLabel := listModel detect: [:each | each text = 'Original Source']].
	methodSourceLabel := listModel detect: [:each | each text = 'Method Source'].
	(x := gsMethod originalSource) isEmpty
		ifTrue: [listModel remove: originalSourceLabel ifAbsent: []]
		ifFalse: 
			[(listModel includes: originalSourceLabel)
				ifFalse: [listModel add: originalSourceLabel before: methodSourceLabel].
			originalSourcePresenter value: x].
	(warnings := gsMethod warnings) notEmpty
		ifTrue: [MessageBox warning: warnings caption: 'Jade Compile Warning']! !
!JadeSystemBrowserPresenter categoriesFor: #basicAddMethodCategory:!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #basicRemoveMethods!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #browseClassReferences!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #browseClassReferences:!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #browseImplementorsOf:!public!queries! !
!JadeSystemBrowserPresenter categoriesFor: #browseMethodsAndSelect:!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #browseMethodsAndSelect:type:!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #browseMethodsContaining!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #browseSendersOf:!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #createSchematicWiring!create schemantic wiring!overrides!public! !
!JadeSystemBrowserPresenter categoriesFor: #createSchematicWiringForClassHierarchyTabs!create schemantic wiring!public! !
!JadeSystemBrowserPresenter categoriesFor: #currentMethodSource!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #editSaveClass!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #handleClassCompileError:!compiling!public! !
!JadeSystemBrowserPresenter categoriesFor: #methodsMenuStrings!menus!public! !
!JadeSystemBrowserPresenter categoriesFor: #methodSourceEqual!private!testing! !
!JadeSystemBrowserPresenter categoriesFor: #onViewOpened!menus!overrides!public! !
!JadeSystemBrowserPresenter categoriesFor: #openMethodListOn:selecting:!menu handlers support!private!queries! !
!JadeSystemBrowserPresenter categoriesFor: #packageTabName!menus!overrides!public! !
!JadeSystemBrowserPresenter categoriesFor: #postOkToChangeEvent!event handlers!private! !
!JadeSystemBrowserPresenter categoriesFor: #preRemoveMethods!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #queryCommand:!event handlers!overrides!public! !
!JadeSystemBrowserPresenter categoriesFor: #removeMethods!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #runClassTests!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #savePackage!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #selectorsString!menu handlers!private! !
!JadeSystemBrowserPresenter categoriesFor: #updateMethod!public!updating! !
!JadeSystemBrowserPresenter categoriesFor: #updateSelector!public!updating! !

!JadeTextDocument methodsFor!

aboutJadeite
	JadeLoginShell aboutJadeite! !
!JadeTextDocument categoriesFor: #aboutJadeite!private! !

!JadeToolsToolBarPresenter methodsFor!

browseClasses

	RowanSystemBrowser showOnSession: gciSession.
! !
!JadeToolsToolBarPresenter categoriesFor: #browseClasses!public! !

!JadeTranscript methodsFor!

methodsChanged24

| string result |
	
	result := gciSession executeString: '| result methods|
		result := MethodVersionHistory uniqueInstance methodsNewerThan: (DateTime now subtractDays: 1 ).
		methods := IdentitySet new.
		result do: [:e | e asCompiledMethod ifNotNil: [:m | methods add: m]].
		methods asArray'.
(JadeMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseMethods: result;
		yourself.
	"JadeInspector showOn: result session: gciSession."
!

methodsChangedDays

| string result |
	(string := Prompter prompt: 'Enter number of days:') isNil ifTrue: [^self].	
	result := gciSession executeString: '| result methods|
		result := MethodVersionHistory uniqueInstance methodsNewerThan: (DateTime now subtractDays: ' , string , ' ).
		methods := IdentitySet new.
		result do: [:e | e asCompiledMethod ifNotNil: [:m | methods add: m]].
		methods asArray'.
	(JadeMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseMethods: result;
		yourself.

!

openRowanProjectList
	^(RowanProjectListShell showOnSession: self gciSession) primaryPresenter
		browseProjects;
		yourself! !
!JadeTranscript categoriesFor: #methodsChanged24!event handling!public! !
!JadeTranscript categoriesFor: #methodsChangedDays!event handling!public! !
!JadeTranscript categoriesFor: #openRowanProjectList!public!rowan! !

!JadeTreeMethodListPresenter methodsFor!

browseMethodsFromString: aString
	| list |

	"self hasTreeListSelection ifFalse: [self addTreeListRoot]."

	list := RowanMethodDefinition
		listFromString: aString
		session: self gciSession.
	methodListPresenter list: list asSortedCollection.
	list notEmpty ifTrue: [
		"methodListPresenter selectFirstMethod."
	].!

browseMethodsFromString: aString methodName: methodName
	| list node |

	self hasTreeListSelection ifFalse: [node := self addTreeListRoot: methodName type: #references].

	list := RowanMethodDefinition
		listFromString: aString
		session: self gciSession.
	methodListPresenter list: list asSortedCollection.
	list notEmpty ifTrue: [
		methodListPresenter selectFirstMethod.
	].
	node isNil ifTrue: [^self].

	treeMethodsMap at: node put: list asSortedCollection.

	treeMethodsPresenter selection: node
!

browseMethodsFromString: aString methodName: methodName type: browseType
	| list  node |

	node := self hasTreeListSelection 
			ifFalse: [self addTreeListRoot: methodName type: browseType] 
			ifTrue: [treeMethodsPresenter model add: (self getLabelForMethod: methodName type: browseType) asChildOf: treeMethodsPresenter selection.].

	list := RowanMethodDefinition
		listFromString: aString
		session: self gciSession.
	methodListPresenter list: list asSortedCollection.
	list notEmpty ifTrue: [
		"methodListPresenter selectFirstMethod."
	].

	treeMethodsMap at: node put: list asSortedCollection.

	treeMethodsPresenter selection: node!

onDropMethodsTree: aDragDropSession

	(aDragDropSession operation = #move) ifFalse: [^self].

	(aDragDropSession suggestedSource class = GsMethod2) ifTrue: [^self dropGsMethod: aDragDropSession].

	^self dropNode: aDragDropSession
! !
!JadeTreeMethodListPresenter categoriesFor: #browseMethodsFromString:!public! !
!JadeTreeMethodListPresenter categoriesFor: #browseMethodsFromString:methodName:!public! !
!JadeTreeMethodListPresenter categoriesFor: #browseMethodsFromString:methodName:type:!public! !
!JadeTreeMethodListPresenter categoriesFor: #onDropMethodsTree:!public! !

!ListPresenter methodsFor!

selectServiceStartingWith: aKeyPressEvent
	| nearestElement character index next |
	Transcript cr.
	character := Character codePoint: aKeyPressEvent code.
	self selection name first = character
		ifTrue: 
			[index := self list indexOf: self selection.
			next := self list at: (index + 1 min: self list size).
			next name first = character
				ifTrue: 
					[self selection: next.
					^self]].
	nearestElement := self list detect: [:service | service name first = character] ifNone: [].
	nearestElement ifNotNil: [self selection: nearestElement]! !
!ListPresenter categoriesFor: #selectServiceStartingWith:!Jadeite!public! !

!MCClassDefinition methodsFor!

initialize: aStream
	| i j |
	definition := (aStream upTo: Character lf) copyReplaceAll: Character cr asString
				with: Character cr asString , Character lf asString.
	className := (definition subStrings includes: 'rwSubclass:')
				ifTrue: [(definition subStrings at: 3) copyWithoutAll: #($')]
				ifFalse: 
					[i := definition indexOf: $#.
					j := definition indexOf: Character cr.
					definition copyFrom: i + 1 to: j - 1]! !
!MCClassDefinition categoriesFor: #initialize:!public! !

!MCPatchBrowser methodsFor!

browseChangedThing
	| selection shell classService |
	selection := operationListPresenter selectionOrNil.
	selection isNil ifTrue: [^MessageBox notify: 'Nothing to browse'].
	selection isRemoval ifTrue: [^MessageBox notify: 'Cannot browse a removed item'].
	
	[classService := RowanClassService named: selection className.
	shell := JadeiteProjectsSystemBrowser showOnSession: gciSession.
	shell currentCard updateServices: (Array with: classService)]
			on: Error
			do: 
				[:ex |
				shell destroy.
				MessageBox notify: 'The change you have selected cannot be browsed'].
	shell currentCard updateAfterFindClass: classService!

operationSelected

	| operation |
	leftTextPresenter 		value: ''.
	leftMemoPresenter	value: ''.
	rightTextPresenter	value: ''.
	rightMemoPresenter	value: ''.
	operationListPresenter hasSelection ifFalse: [^self].
	operation := operationListPresenter selection.
	leftTextPresenter 		value: operation obsoletionText.
	leftMemoPresenter	value: operation obsoletionMemo.
	rightTextPresenter	value: operation modificationText.
	rightMemoPresenter	value: operation modificationMemo.
	operation obsoletionMemoMarkers do: [:each | 
		leftMemoPresenter view addMarkerType: each key at: each value.
	].
	operation modificationMemoMarkers do: [:each |
		rightMemoPresenter view addMarkerType: each key at: each value.
	].
! !
!MCPatchBrowser categoriesFor: #browseChangedThing!public! !
!MCPatchBrowser categoriesFor: #operationSelected!public! !

!MethodListPresenter methodsFor!

browseClass

	| selection browserClass |
	selection := methodListPresenter selection.
	browserClass := Smalltalk at: #RowanSystemBrowser.		"Avoid circular dependencies on load order"
	(browserClass showOnSession: self gciSession)
		selectClass: selection gsClass name
		selector: selection name.
!

browseMethodsContaining

	| string |
	(string := Prompter prompt: 'Enter substring:') isNil ifTrue: [^self].
	(JadeMethodListBrowser showOnSession: self gciSession) primaryPresenter browseMethodsContaining: string.
! !
!MethodListPresenter categoriesFor: #browseClass!public! !
!MethodListPresenter categoriesFor: #browseMethodsContaining!public! !

!MethodSourcePresenter methodsFor!

fileSave
		"Answer whether the save succeeded (false means to stay on the window and cancel any attempt to leave)"

	| user theClass newSelector category string stream list warnings errors index a b c methodExists line newOop |

	(theClass := gsMethod behavior) isNil ifTrue: [^true].
	newSelector := self newSelector.
	currentSelector = newSelector ifFalse: [
		methodExists := gciSession
			serverPerform: #'class:includesSelector:'
			with: theClass
			with: newSelector.
		methodExists ifTrue: [
			(MessageBox confirm: 'Replace method?' caption: 'Method already exists!!') ifFalse: [^self].
		].
	].
	user := self trigger: #'needUser'.
	(category := gsMethod category) isNil ifTrue: [self error: 'We need a method category!!?'].

	string := gciSession
		serverPerform: #'compileMethod:behavior:user:inCategory:'
		with: documentPresenter value replaceCrLfWithLf
		with: theClass 
		with: user 
		with: category.

	stream := ReadStream on: string.
	(line := stream nextLine) notEmpty ifTrue: [
		| pieces |
		pieces := line subStrings: Character tab.
		newOop := (pieces at: 1) asNumber. 
		newSelector := pieces at: 2.
		documentPresenter isModified: false.
		self 
			trigger: #'savedMethod:inClass:' 
			with: newSelector
			with: theClass.
	].
	newOop isNil ifFalse:[
		parentPresenter updateSaveMethodOop: newOop].
	(list := stream upToEnd subStrings: Character lf) isEmpty ifTrue: [^true].
	warnings := list select: [:each | each beginsWith: 'WARNING:'].
	warnings := warnings collect: [:each | each copyFrom: 10 to: each size].
	warnings notEmpty ifTrue: [
		ChoicePrompter
			choices: warnings
			caption: 'Compile warnings'.
	].
	errors := list select: [:each | each beginsWith: 'ERROR:'].
	errors isEmpty ifTrue: [^true].
	list := errors first subStrings: Character tab.
	string := documentPresenter value replaceCrLfWithLf.
	index := (list at: 3) asNumber - 1.
	a := (string copyFrom: 1 to: index) "replaceLfWithCrLf".
	b := (list at: 4) "replaceLfWithCrLf".
	c := (string copyFrom: index + 1 to: string size) "replaceLfWithCrLf".
	index := a size + 1.
	string := a , b , c.
	documentPresenter value: string.
	documentPresenter view
		selectionStart: index 
		length: b size.
	^false.
!

isOkayToChange
	^self isOkayToChangeSource: documentPresenter!

methodMenuBreak: aMenu
	| selection |
	documentPresenter view isModified ifTrue: [^self].
	selection := parentPresenter methodListSelection.
	selection ifNil: [^self].
	selection appendToSourceMenu: aMenu presenter: documentPresenter view !

updateMethodSource
	parentPresenter updateMethodSource! !
!MethodSourcePresenter categoriesFor: #fileSave!public! !
!MethodSourcePresenter categoriesFor: #isOkayToChange!Jade!private! !
!MethodSourcePresenter categoriesFor: #methodMenuBreak:!Jade!public! !
!MethodSourcePresenter categoriesFor: #updateMethodSource!public! !

!Object methodsFor!

isClassService

	^false!

isMethodService

	^false!

isPackageService

	^false!

isProjectService

	^false!

prepareForReplication

	!

rowanFixMe

	"do nothing. Used for marking to-do items 
	during Rowan Development"! !
!Object categoriesFor: #isClassService!public!testing! !
!Object categoriesFor: #isMethodService!public!testing! !
!Object categoriesFor: #isPackageService!public!testing! !
!Object categoriesFor: #isProjectService!public!testing! !
!Object categoriesFor: #prepareForReplication!Jadeite!public! !
!Object categoriesFor: #rowanFixMe!public!testing! !

!ObjectLogBrowser methodsFor!

debug: anArray

	| oopType |
	oopType := gciSession oopTypeWithOop: (anArray at: 9) asNumber.
	RowanDebugger debuggerClass 
		openOn: (GsProcess session: gciSession oopType: oopType) 
		message: (anArray at: 8)
		terminateOnClose: false.
! !
!ObjectLogBrowser categoriesFor: #debug:!public! !

!Presenter methodsFor!

update: browserUpdate withSelector: selector
	browserUpdate updatesPerform: selector presenter: self!

update: browserUpdate withSelector: selector browser: browser
	browserUpdate updatesPerform: selector presenter: self browser: browser !

updateReady: aBlock

	aBlock value

	!

updateSelectionsFor: browserUpdate

	browserUpdate updates do:[:update | self updateSelectionsForUpdate: update].

	!

updateSelectionsForUpdate: update

	"do nothing for most presenters"

	! !
!Presenter categoriesFor: #update:withSelector:!Jadeite!public! !
!Presenter categoriesFor: #update:withSelector:browser:!Jadeite!public! !
!Presenter categoriesFor: #updateReady:!public!rowan! !
!Presenter categoriesFor: #updateSelectionsFor:!public!rowan! !
!Presenter categoriesFor: #updateSelectionsForUpdate:!public!rowan! !

!RowanCommandResult methodsFor!

classCategoryUpdate: presenter
	!

classCommentUpdate: presenter
	
	!

classDefinitionUpdate: presenter
	!

classesHierarchyUpdate: presenter
!

classesUpdate: presenter browser: anObject
	!

classHierarchyUpdate: presenter
	!

classHierarchyUpdate: presenter browser: browser
!

classMethodsUpdate: presenter browser: anObject
	!

classUpdate: presenter
	!

dictionaryUpdate: presenter
	!

filterUpdate: presenter browser: anObject
	!

globalsUpdate: presenter!

methodFilterUpdate: presenter
	!

methodSourceUpdate: presenter browser: anObject
	!

methodsRemoved: presenter
!

methodsUpdate: presenter
	!

methodUpdate: presenter
	!

packagesUpdate: presenter!

projectPackagesUpdate: presenter browser: anObject
	!

projectSelectionUpdate: aPresenter
!

projectsUpdate: aPresenter
!

removedClass: aPresenter
!

superclassListUpdate: presenter
	!

updateClassCategorySelectionsFor: presenter!

updateClassHierarchySelectionFor: presenter!

updateClassSelectionFor: presenter!

updateDictionarySelectionsFor: presenter
	!

updateMethodFilterSelectionFor: presenter!

updateMethodSelectionFor: presenter!

updatePackageSelectionsFor: presenter
	!

updateSelectorFor: presenter!

updateSuperclassSelectionFor: presenter!

updateType
	"old-style command results don't use updateType"

	^nil! !
!RowanCommandResult categoriesFor: #classCategoryUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #classCommentUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #classDefinitionUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #classesHierarchyUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #classesUpdate:browser:!public!updating! !
!RowanCommandResult categoriesFor: #classHierarchyUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #classHierarchyUpdate:browser:!public!updating! !
!RowanCommandResult categoriesFor: #classMethodsUpdate:browser:!public!updating! !
!RowanCommandResult categoriesFor: #classUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #dictionaryUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #filterUpdate:browser:!public!updating! !
!RowanCommandResult categoriesFor: #globalsUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #methodFilterUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #methodSourceUpdate:browser:!public!updating! !
!RowanCommandResult categoriesFor: #methodsRemoved:!public!updating! !
!RowanCommandResult categoriesFor: #methodsUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #methodUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #packagesUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #projectPackagesUpdate:browser:!public!updating! !
!RowanCommandResult categoriesFor: #projectSelectionUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #projectsUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #removedClass:!public!updating! !
!RowanCommandResult categoriesFor: #superclassListUpdate:!public!updating! !
!RowanCommandResult categoriesFor: #updateClassCategorySelectionsFor:!public!updating! !
!RowanCommandResult categoriesFor: #updateClassHierarchySelectionFor:!public!updating! !
!RowanCommandResult categoriesFor: #updateClassSelectionFor:!public!updating! !
!RowanCommandResult categoriesFor: #updateDictionarySelectionsFor:!public!updating! !
!RowanCommandResult categoriesFor: #updateMethodFilterSelectionFor:!public!updating! !
!RowanCommandResult categoriesFor: #updateMethodSelectionFor:!public!updating! !
!RowanCommandResult categoriesFor: #updatePackageSelectionsFor:!public!updating! !
!RowanCommandResult categoriesFor: #updateSelectorFor:!public!updating! !
!RowanCommandResult categoriesFor: #updateSuperclassSelectionFor:!public!updating! !
!RowanCommandResult categoriesFor: #updateType!accessing!public! !

!RowanGsMethod methodsFor!

printOn: aStream
	super printOn: aStream.
	aStream cr.
	self class allInstVarNames do: 
			[:instVarName |
			aStream
				nextPutAll: instVarName;
				nextPutAll: ' - ';
				nextPutAll: (self instVarNamed: instVarName) printString;
				cr]! !
!RowanGsMethod categoriesFor: #printOn:!printing!public! !

!RowanMethodDefinition methodsFor!

methodService
	^methodDefinitionService ifNil: [methodDefinitionService := RowanMethodService on: gciSession]! !
!RowanMethodDefinition categoriesFor: #methodService!public!services! !

!RowanPatch methodsFor!

operations: aCollection 

	operations := aCollection!

session: aCollection 

	gciSession := aCollection! !
!RowanPatch categoriesFor: #operations:!public! !
!RowanPatch categoriesFor: #session:!public! !

"End of package definition"!

