| package |
package := Package name: 'Rowan UI Base'.
package paxVersion: 1;
	basicComment: 'Rowan GUI tools built on Jade Smalltalk for Dolphin. '.


package classNames
	add: #PackageMethodListPresenter;
	add: #RowanClassDefinitionService;
	add: #RowanDefinition;
	add: #RowanDefinitionService;
	add: #RowanDefinitionServiceTest;
	add: #RowanMethodDefinition;
	add: #RowanMethodDefinitionService;
	add: #RowanMethodListBrowser;
	add: #RowanMethodListPresenter;
	add: #RowanMethodSelectionPresenter;
	add: #RowanMethodSourcePresenter;
	add: #RowanPackageDefinitionService;
	add: #RowanPackagePresenter;
	add: #RowanPackageShell;
	add: #RowanPresenter;
	add: #RowanShell;
	yourself.

package methodNames
	add: #GsClass -> #methodsUpTo:filterList:isVariables:;
	add: #GsMethod2 -> #asUpdatedVersion:;
	add: #JadeMethodListPresenter -> #browseImplementorsOf:;
	add: #JadeMethodListPresenter -> #browseMethodsFromString:;
	add: #JadeMethodListPresenter -> #browseMethodsFromString:methodName:;
	add: #JadeMethodListPresenter -> #browseMethodsFromString:methodName:type:;
	add: #JadeMethodListPresenter -> #updateSource;
	add: #JadePresenterA -> #browseImplementorsOf:;
	add: #JadePresenterA -> #browseSendersOf:;
	add: #JadeSystemBrowserPresenter -> #browseMethodsAndSelect:;
	add: #JadeSystemBrowserPresenter -> #browseMethodsAndSelect:type:;
	add: #JadeTranscript -> #methodsChanged24;
	add: #JadeTranscript -> #methodsChangedDays;
	add: #JadeTreeMethodListPresenter -> #browseMethodsFromString:;
	add: #JadeTreeMethodListPresenter -> #browseMethodsFromString:methodName:;
	add: #JadeTreeMethodListPresenter -> #browseMethodsFromString:methodName:type:;
	add: #JadeTreeMethodListPresenter -> #onDropMethodsTree:;
	add: #MethodListPresenter -> #browseMethodsContaining;
	add: #Object -> #rowanFixMe;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Choice Prompter';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Control Bars\Dolphin Control Bars';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Deprecated\Dolphin MVP (Deprecated)';
	add: '..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Rich Text Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models';
	add: 'GemStone Objects';
	add: 'GemStone Session';
	add: 'Jade Class Browser';
	add: 'Jade Method Browser';
	add: 'Jade System Browser';
	add: 'Jade Transcript';
	add: 'Jade UI Base';
	add: '..\Core\Contributions\Solutions Software\SSW EditableListView';
	add: '..\Core\Contributions\Camp Smalltalk\SUnit\SUnit';
	yourself).

package!

"Class Definitions"!

GsMethod2 subclass: #RowanMethodDefinition
	instanceVariableNames: 'selector source className packageName projectName methodDefinitionService'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Model subclass: #RowanDefinition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Model subclass: #RowanDefinitionService
	instanceVariableNames: 'transport remoteService'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanDefinitionService subclass: #RowanClassDefinitionService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanDefinitionService subclass: #RowanMethodDefinitionService
	instanceVariableNames: 'source selector methodDefinitions category packageName className meta'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanDefinitionService subclass: #RowanPackageDefinitionService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #RowanPresenter
	instanceVariableNames: 'projectToolsOop'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MethodSourcePresenter subclass: #RowanMethodSourcePresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeMethodListPresenter subclass: #RowanMethodListPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MethodListPresenter subclass: #PackageMethodListPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanPresenter subclass: #RowanMethodSelectionPresenter
	instanceVariableNames: 'methodListPresenter methodSourcePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanPresenter subclass: #RowanPackagePresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeShell subclass: #RowanShell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeMethodListBrowser subclass: #RowanMethodListBrowser
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanShell subclass: #RowanPackageShell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #RowanDefinitionServiceTest
	instanceVariableNames: 'shell methodService'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!GsClass methodsFor!

methodsUpTo: aClass filterList: aList isVariables: aBoolean

	|  stream string |
	stream := WriteStream on: String new.
	aList do: [:each | stream nextPutAll: each; tab].
	string := gciSession
		serverPerform: #'methodsFor:upTo:filter:isVariables:' 
		with: self
		with: aClass
		with: stream contents 
		with: aBoolean.
	^RowanMethodDefinition
		listFromString: string 
		session: gciSession.
! !
!GsClass categoriesFor: #methodsUpTo:filterList:isVariables:!Methods!public! !

!GsMethod2 methodsFor!

asUpdatedVersion: stringOop
	"Answer <RowanMethodDefinition> of the new method based on the receiver."
	| stringToGetNewMethod |

	stringToGetNewMethod := stringOop, Character tab asString, 
						name, Character tab asString, 
						category, Character tab asString, 
						gsClass oopType lowPart printString, Character tab asString, 
						gsClass name, Character tab asString, 
						gsClass category, Character tab asString, 
						gsClass dictionary , Character tab asString,
						isTestCase printString.

	^RowanMethodDefinition fromString: stringToGetNewMethod session: gciSession.
! !
!GsMethod2 categoriesFor: #asUpdatedVersion:!public! !

!JadeMethodListPresenter methodsFor!

browseImplementorsOf: aGsMethod
	
	^self
		browse: #'implementorsOf:' 
		method: aGsMethod.
!

browseMethodsFromString: aString

	| list |
	list := RowanMethodDefinition
		listFromString: aString
		session: self gciSession.
	methodListPresenter list: list asSortedCollection.
	list notEmpty ifTrue: [
		methodListPresenter selectFirstMethod.
	].
!

browseMethodsFromString: aString methodName: methodName
	| list |

	list := RowanMethodDefinition
		listFromString: aString
		session: self gciSession.
	methodListPresenter list: list asSortedCollection.
	list notEmpty ifTrue: [
		methodListPresenter selectFirstMethod.
	].!

browseMethodsFromString: aString methodName: methodName type: browseType
	| list |
	list := RowanMethodDefinition
		listFromString: aString
		session: self gciSession.
	methodListPresenter list: list asSortedCollection.
	list notEmpty ifTrue: [
		methodListPresenter selectFirstMethod.
	].!

updateSource
	| gsClass gsMethod2 gsMethod |
	(gsClass := self selectedClass)
		ifNotNil: 
			[(gsMethod2 := methodListPresenter selectedMethod)
				ifNotNil: 
					[gsMethod2 gsClass ~= gsClass ifTrue: [self error: 'Method not from selected class!!'].
					gsMethod := GsMethod fromOopType: gsMethod2 oopType session: gsMethod2 gciSession]].
	gsMethod
		ifNotNil: 
			[methodSourcePresenter gsMethod: gsMethod.
			self doSearch].
	methodListPresenter selectedMethod ifNil: [^self].
	methodSourcePresenter documentPresenter
		lastGsShape: (self registry getClass: methodListPresenter selectedMethod gsClass name)! !
!JadeMethodListPresenter categoriesFor: #browseImplementorsOf:!public! !
!JadeMethodListPresenter categoriesFor: #browseMethodsFromString:!public! !
!JadeMethodListPresenter categoriesFor: #browseMethodsFromString:methodName:!public! !
!JadeMethodListPresenter categoriesFor: #browseMethodsFromString:methodName:type:!public! !
!JadeMethodListPresenter categoriesFor: #updateSource!public! !

!JadePresenterA methodsFor!

browseImplementorsOf: aGsMethodOrString
	
	(parentPresenter class = JadeTreeMethodListPresenter) ifTrue: [^parentPresenter browseImplementorsOf: aGsMethodOrString].

	^(RowanMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseImplementorsOf: aGsMethodOrString;
		yourself.
!

browseSendersOf: aGsMethodOrString

	(parentPresenter class = JadeTreeMethodListPresenter) ifTrue: [^parentPresenter browseSendersOf: aGsMethodOrString].

	(RowanMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseSendersOf: aGsMethodOrString;
		yourself.
! !
!JadePresenterA categoriesFor: #browseImplementorsOf:!public! !
!JadePresenterA categoriesFor: #browseSendersOf:!public! !

!JadeSystemBrowserPresenter methodsFor!

browseMethodsAndSelect: aString

	(RowanMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseMethodsFromString: readStream upToEnd methodName: aString;
		selecting: aString.
!

browseMethodsAndSelect: aString type: browseType

	(RowanMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseMethodsFromString: readStream upToEnd methodName: aString type: browseType;
		selecting: aString.
! !
!JadeSystemBrowserPresenter categoriesFor: #browseMethodsAndSelect:!menu handlers!public! !
!JadeSystemBrowserPresenter categoriesFor: #browseMethodsAndSelect:type:!menu handlers!public! !

!JadeTranscript methodsFor!

methodsChanged24

| string result |
	
	result := gciSession executeString: '| result methods|
		result := MethodVersionHistory uniqueInstance methodsNewerThan: (DateTime now subtractDays: 1 ).
		methods := IdentitySet new.
		result do: [:e | e asCompiledMethod ifNotNil: [:m | methods add: m]].
		methods asArray'.
(RowanMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseMethods: result;
		yourself.
	"JadeInspector showOn: result session: gciSession."
!

methodsChangedDays

| string result |
	(string := Prompter prompt: 'Enter number of days:') isNil ifTrue: [^self].	
	result := gciSession executeString: '| result methods|
		result := MethodVersionHistory uniqueInstance methodsNewerThan: (DateTime now subtractDays: ' , string , ' ).
		methods := IdentitySet new.
		result do: [:e | e asCompiledMethod ifNotNil: [:m | methods add: m]].
		methods asArray'.
	(RowanMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseMethods: result;
		yourself.

! !
!JadeTranscript categoriesFor: #methodsChanged24!event handling!public! !
!JadeTranscript categoriesFor: #methodsChangedDays!event handling!public! !

!JadeTreeMethodListPresenter methodsFor!

browseMethodsFromString: aString
	| list |

	"self hasTreeListSelection ifFalse: [self addTreeListRoot]."

	list := RowanMethodDefinition
		listFromString: aString
		session: self gciSession.
	methodListPresenter list: list asSortedCollection.
	list notEmpty ifTrue: [
		"methodListPresenter selectFirstMethod."
	].!

browseMethodsFromString: aString methodName: methodName
	| list node |

	self hasTreeListSelection ifFalse: [node := self addTreeListRoot: methodName type: #references].

	list := RowanMethodDefinition
		listFromString: aString
		session: self gciSession.
	methodListPresenter list: list asSortedCollection.
	list notEmpty ifTrue: [
		methodListPresenter selectFirstMethod.
	].
	node isNil ifTrue: [^self].

	treeMethodsMap at: node put: list asSortedCollection.

	treeMethodsPresenter selection: node
!

browseMethodsFromString: aString methodName: methodName type: browseType
	| list  node |

	node := self hasTreeListSelection 
			ifFalse: [self addTreeListRoot: methodName type: browseType] 
			ifTrue: [treeMethodsPresenter model add: (self getLabelForMethod: methodName type: browseType) asChildOf: treeMethodsPresenter selection.].

	list := RowanMethodDefinition
		listFromString: aString
		session: self gciSession.
	methodListPresenter list: list asSortedCollection.
	list notEmpty ifTrue: [
		"methodListPresenter selectFirstMethod."
	].

	treeMethodsMap at: node put: list asSortedCollection.

	treeMethodsPresenter selection: node!

onDropMethodsTree: aDragDropSession

	(aDragDropSession operation = #move) ifFalse: [^self].

	(aDragDropSession suggestedSource class = RowanMethodDefinition) ifTrue: [^self dropGsMethod: aDragDropSession].

	^self dropNode: aDragDropSession
! !
!JadeTreeMethodListPresenter categoriesFor: #browseMethodsFromString:!public! !
!JadeTreeMethodListPresenter categoriesFor: #browseMethodsFromString:methodName:!public! !
!JadeTreeMethodListPresenter categoriesFor: #browseMethodsFromString:methodName:type:!public! !
!JadeTreeMethodListPresenter categoriesFor: #onDropMethodsTree:!public! !

!MethodListPresenter methodsFor!

browseMethodsContaining

	| string |
	(string := Prompter prompt: 'Enter substring:') isNil ifTrue: [^self].
	(RowanMethodListBrowser showOnSession: self gciSession) primaryPresenter browseMethodsContaining: string.
! !
!MethodListPresenter categoriesFor: #browseMethodsContaining!public! !

!Object methodsFor!

rowanFixMe

	"do nothing. Used for marking to-do items 
	during Rowan Development"! !
!Object categoriesFor: #rowanFixMe!public!testing! !

"End of package definition"!

