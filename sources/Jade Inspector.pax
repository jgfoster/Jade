| package |
package := Package name: 'Jade Inspector'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '0.026'.

package basicScriptAt: #postinstall put: 'JadeInspector setNavigationInspector'.

package classNames
	add: #JadeNavigationInspector;
	yourself.

package methodNames
	add: #JadeInspector -> #openNavigationInspector;
	add: #JadeServer64bit24 -> #inspect:;
	add: #JadeServer64bit24 -> #inspectClientForwarder:;
	add: #JadeServer64bit24 -> #isClientForwarder:;
	add: #JadeServer64bit24 -> #printStringOf:;
	add: #JadeServer64bit3x -> #inspect:;
	add: #JadeServer64bit3x -> #inspectNamedInstanceVariablesOf:on:;
	add: #JadeServer64bit3x -> #keysForDictionary:;
	add: 'JadeInspector class' -> #setNavigationInspector;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: 'GemStone Session';
	add: 'Jade UI Base';
	yourself).

package!

"Class Definitions"!

JadeInspector subclass: #JadeNavigationInspector
	instanceVariableNames: 'oopsCollection objectIndex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!JadeInspector methodsFor!

openNavigationInspector

	instVarListPresenter hasSelection ifFalse: [^JadeNavigationInspector showOn: self model session: gciSession].

	^(instVarListPresenter selection key = 'self')
		ifTrue: [JadeNavigationInspector showOn: self model session: gciSession] 
		ifFalse: [JadeNavigationInspector showOn: instVarListPresenter selection value session: gciSession]! !
!JadeInspector categoriesFor: #openNavigationInspector!accessing!private! !

!JadeInspector class methodsFor!

setNavigationInspector

	self setDefaultInspectorClass: JadeNavigationInspector! !
!JadeInspector class categoriesFor: #setNavigationInspector!public! !

!JadeServer64bit24 methodsFor!

inspect: anObject

	^(self isClientForwarder: anObject)
		ifTrue: [self inspectClientForwarder: anObject]
		ifFalse: [super inspect: anObject].
!

inspectClientForwarder: anObject

	| stream |
	(stream := WriteStream on: String new)
		nextPutAll: 'ClientForwarder'; tab;
		yourself.
	(self oopOf: anObject) printOn: stream.
	stream lf;
		nextPut: $1; lf;
		nextPutAll: 'clientObject'; tab;
		yourself.
	self print: (self oopOf: anObject clientObject) on: stream.
	stream lf; nextPutAll: (self printStringOf: anObject).
	^stream contents.
!

isClientForwarder: anObject

	^(Reflection classOf: anObject) name == #'ClientForwarder' 
!

printStringOf: anObject

	^(self isClientForwarder: anObject)
		ifFalse: [anObject printString]
		ifTrue: ['aClientForwarder(' , anObject clientObject printString , ')'].
! !
!JadeServer64bit24 categoriesFor: #inspect:!Inspector!public! !
!JadeServer64bit24 categoriesFor: #inspectClientForwarder:!Inspector!public! !
!JadeServer64bit24 categoriesFor: #isClientForwarder:!Debugger!public! !
!JadeServer64bit24 categoriesFor: #printStringOf:!Inspector!public! !

!JadeServer64bit3x methodsFor!

inspect: anObject
	| dynamic dynamicSize indexedSize instVarNames namedSize stream string isRcBag |
	(self isClientForwarder: anObject) ifTrue: [^self inspectClientForwarder: anObject].
	(stream := WriteStream on: String new)
		nextPutAll: anObject class name; tab;
		yourself.
	(self oopOf: anObject) printOn: stream.
	stream lf.
	(anObject isKindOf: Dictionary superclass) ifTrue: [^self inspectDictionary: anObject on: stream].
	instVarNames := anObject class allInstVarNames.
	namedSize := instVarNames size.
	dynamic := anObject dynamicInstanceVariables.
	dynamicSize := dynamic size.
	isRcBag := anObject class name == #RcIdentityBag.
	indexedSize := (anObject class isNsc or: [anObject class isIndexable]) ifFalse: [
		0.
	] ifTrue: [
		isRcBag ifTrue: [ anObject size min: 200] ifFalse: [(anObject _primitiveSize - namedSize)  min: 200].
	].
	
	namedSize + dynamicSize + indexedSize printOn: stream.
	stream lf.
	1 to: instVarNames size do: [:i | 
		stream nextPutAll: (instVarNames at: i); tab.
		self print: (self oopOf: (anObject instVarAt: i)) on: stream.
		stream lf.
	].
	1 to: dynamicSize do: [:i | 
		stream nextPutAll: (dynamic at: i); tab.
		self print: (self oopOf: (anObject dynamicInstVarAt: (dynamic at: i))) on: stream.
		stream lf.
	].
	isRcBag
		ifTrue: [ |aBag |
			aBag := anObject _asIdentityBag.
			1 to: indexedSize do: [:i | 
				i printOn: stream.
				stream tab.
				self print: (self oopOf: (aBag _at: i )) on: stream.
				stream lf]]
		ifFalse: [
			1 to: indexedSize do: [:i | 
				i printOn: stream.
				stream tab.
				self print: (self oopOf: (anObject _primitiveAt: i + namedSize)) on: stream.
				stream lf] ].

	(string := anObject printString) size > 5000 ifTrue: [string := (string copyFrom: 1 to: 5000) , '...'].
	string class == String ifFalse: [
		string := String withAll: (string collect: [:each | (32 <= each codePoint and: [each codePoint <= 255]) ifTrue: [each] ifFalse: [$?]]).
	].
	^stream 
		nextPutAll: string; 
		contents.
!

inspectNamedInstanceVariablesOf: anObject on: aStream

	| list dynamic size |
	list := anObject class allInstVarNames.
	dynamic := anObject dynamicInstanceVariables.
	size := list size + dynamic size.
	anObject class format > 0 ifTrue: [
		size := size + (anObject _basicSize min: 200).
	].
	size printOn: aStream.
	aStream lf.
	1 to: list size do: [:i | 
		aStream nextPutAll: (list at: i); tab.
		self print: (self oopOf: (anObject instVarAt: i)) on: aStream.
		aStream lf.
	].
	1 to: dynamic size do: [:i | 
		aStream nextPutAll: (dynamic at: i); tab.
		self print: (self oopOf: (anObject dynamicInstVarAt: (dynamic at: i))) on: aStream.
		aStream lf.
	].
!

keysForDictionary: aDictionary 
	"RubyHash does not implement #'keys' or #'keysDo:'!!"

	| keys |
	(aDictionary isKindOf: RubyHash) ifFalse: [^super keysForDictionary: aDictionary].
	keys := Set new.
	aDictionary keysAndValuesDo: [:eachKey :eachValue | keys add: eachKey].
	^keys.
! !
!JadeServer64bit3x categoriesFor: #inspect:!Inspector!public!Transcript! !
!JadeServer64bit3x categoriesFor: #inspectNamedInstanceVariablesOf:on:!Inspector!public!Transcript! !
!JadeServer64bit3x categoriesFor: #keysForDictionary:!Inspector!public! !

"End of package definition"!

