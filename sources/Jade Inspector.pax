| package |
package := Package name: 'Jade Inspector'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '0.026'.

package basicScriptAt: #postinstall put: 'JadeInspector setNavigationInspector'.

package classNames
	add: #JadeInspector;
	add: #JadeNavigationInspector;
	yourself.

package methodNames
	add: #CodeSourcePresenter -> #jadeInspect;
	add: #JadeServer -> #_inspectDictionary:on:;
	add: #JadeServer -> #_inspectNamedInstanceVariablesOf:on:;
	add: #JadeServer -> #_print:on:;
	add: #JadeServer -> #_printStringOf:;
	add: #JadeServer -> #_printStringOf:to:;
	add: #JadeServer -> #inspect:;
	add: #JadeServer -> #printStringOf:;
	add: #JadeServer -> #printStringOf:to:;
	add: #JadeServer64bit24 -> #_inspectClientForwarder:;
	add: #JadeServer64bit24 -> #inspect:;
	add: #JadeServer64bit33 -> #_printStringOf:;
	add: #JadeServer64bit3x -> #inspect:;
	add: #Object -> #isJadeInspector;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\Core\Object Arts\Dolphin\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Message Box'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\Core\Object Arts\Dolphin\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\Core\Object Arts\Dolphin\MVP\Icons\Dolphin Text Tile Icons'
	'..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters'
	'..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models'
	'GemStone Session'
	'Jade UI Base').

package!

"Class Definitions"!

JadeTextDocument subclass: #JadeInspector
	instanceVariableNames: 'instVarListPresenter'
	classVariableNames: 'DefaultInspectorClass'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeInspector subclass: #JadeNavigationInspector
	instanceVariableNames: 'oopsCollection objectIndex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!CodeSourcePresenter methodsFor!

jadeInspect

	| result |
	result := self jadeExecuteAndDisplay: false.	result == self ifTrue: [^self].
	JadeInspector showOn: result session: gciSession.
! !
!CodeSourcePresenter categoriesFor: #jadeInspect!Jade!private! !

!JadeServer methodsFor!

_inspectDictionary: aDictionary on: aStream

	| keys keyDict |
	keys := self _keysForDictionary: aDictionary.
	keyDict := Dictionary new.
	keys do: [:each | 
		| key |
		key := each printString , '~' , (self oopOf: each) printString.
		key := key collect: [:char | char asciiValue < 32 ifTrue: [$?] ifFalse: [char]].
		keyDict
			at: key
			put: each.
	].
	keys size printOn: aStream.
	aStream lf.
	keyDict keys asSortedCollection do: [:each | 
		| index keyString key value valueString |
		index := each findLast: [:char | char = $~].
		keyString := each copyFrom: 1 to: index - 1.
		key := keyDict at: each.
		value := aDictionary at: key. 
		valueString := (self _printStringOf: value to: 10).
		valueString := self _decodeString: valueString.
		aStream nextPutAll: keyString , '->' , valueString; tab.
		self _print: (self oopOf: value) on: aStream.
		aStream lf.
	].
	^aStream 
		lf; 
		contents.
!

_inspectNamedInstanceVariablesOf: anObject on: aStream

	| list size |
	list := anObject class allInstVarNames.
	size := list size.
	anObject class format > 0 ifTrue: [
		size := size + (anObject _basicSize min: 200).
	].
	size printOn: aStream.
	aStream lf.
	1 to: list size do: [:i | 
		aStream nextPutAll: (list at: i); tab.
		self _print: (self oopOf: (anObject instVarAt: i)) on: aStream.
		aStream lf.
	].
!

_print: anObject on: aStream

	| string |
	string := self _printStringOf: anObject.
	aStream nextPutAll: string.
!

_printStringOf: anObject

	^anObject printString!

_printStringOf: anObject to: anInteger

	| string |
	(string := self _printStringOf: anObject) size > anInteger ifTrue: [string := (string copyFrom: 1 to: anInteger) , '...'].
	^string.
!

inspect: anObject

	| stream string |
	(stream := self _writeStreamOnString)
		nextPutAll: anObject class name; tab;
		yourself.
	(self oopOf: anObject) printOn: stream.
	stream lf.
	(anObject isKindOf: Dictionary superclass) ifTrue: [^self _inspectDictionary: anObject on: stream].
	self _inspectNamedInstanceVariablesOf: anObject on: stream.
	anObject class format > 0 ifTrue: [
		1 to: (anObject _basicSize min: 200) do: [:i | 
			i printOn: stream.
			stream tab.
			self _print: (self oopOf: (anObject _at: i)) on: stream.
			stream lf.
		].
	].
	(string := anObject printString) size > 5000 ifTrue: [string := (string copyFrom: 1 to: 5000) , '...'].
	stream nextPutAll: string.
	^self _encodeString: stream contents
!

printStringOf: anObject

	^self _encodeString: (self _printStringOf: anObject)!

printStringOf: anObject to: anInteger

	^self _encodeString: (self _printStringOf: anObject to: anInteger).
! !
!JadeServer categoriesFor: #_inspectDictionary:on:!private! !
!JadeServer categoriesFor: #_inspectNamedInstanceVariablesOf:on:!private! !
!JadeServer categoriesFor: #_print:on:!Inspector!public! !
!JadeServer categoriesFor: #_printStringOf:!Inspector!private! !
!JadeServer categoriesFor: #_printStringOf:to:!Inspector!public! !
!JadeServer categoriesFor: #inspect:!Inspector!public! !
!JadeServer categoriesFor: #printStringOf:!Inspector!public! !
!JadeServer categoriesFor: #printStringOf:to:!Inspector!public! !

!JadeServer64bit24 methodsFor!

_inspectClientForwarder: anObject

	| stream |
	(stream := self _writeStreamOnString)
		nextPutAll: 'ClientForwarder'; tab;
		yourself.
	(self oopOf: anObject) printOn: stream.
	stream lf;
		nextPut: $1; lf;
		nextPutAll: 'clientObject'; tab;
		yourself.
	self _print: (self oopOf: anObject clientObject) on: stream.
	stream lf; nextPutAll: (self _printStringOf: anObject).
	^stream contents.
!

inspect: anObject

	^(self _isClientForwarder: anObject)
		ifTrue: [self _encodeString: (self _inspectClientForwarder: anObject)]
		ifFalse: [super inspect: anObject].
! !
!JadeServer64bit24 categoriesFor: #_inspectClientForwarder:!Inspector!private! !
!JadeServer64bit24 categoriesFor: #inspect:!Inspector!public! !

!JadeServer64bit33 methodsFor!

_printStringOf: anObject

	(anObject isKindOf: Utf8) ifTrue: [^anObject decodeToUnicode].
	^super _printStringOf: anObject! !
!JadeServer64bit33 categoriesFor: #_printStringOf:!Inspector!public! !

!JadeServer64bit3x methodsFor!

inspect: anObject

	| dynamic dynamicSize indexedSize instVarNames namedSize stream string isRcBag |
	(self _isClientForwarder: anObject) ifTrue: [^self _encodeString: (self _inspectClientForwarder: anObject)].
	(stream := self _writeStreamOnString)
		nextPutAll: anObject class name; tab;
		yourself.
	(self oopOf: anObject) printOn: stream.
	stream lf.
	(anObject isKindOf: Dictionary superclass) ifTrue: [^self _inspectDictionary: anObject on: stream].
	instVarNames := anObject class allInstVarNames.
	namedSize := instVarNames size.
	dynamic := anObject dynamicInstanceVariables.
	dynamicSize := dynamic size.
	isRcBag := anObject class name == #RcIdentityBag.
	indexedSize := (anObject class isNsc or: [anObject class isIndexable]) ifFalse: [
		0.
	] ifTrue: [
		isRcBag ifTrue: [ anObject size min: 200] ifFalse: [(anObject _primitiveSize - namedSize)  min: 200].
	].
	
	namedSize + dynamicSize + indexedSize printOn: stream.
	stream lf.
	1 to: instVarNames size do: [:i | 
		stream nextPutAll: (instVarNames at: i); tab.
		self _print: (self oopOf: (anObject instVarAt: i)) on: stream.
		stream lf.
	].
	1 to: dynamicSize do: [:i | 
		stream nextPutAll: (dynamic at: i); tab.
		self _print: (self oopOf: (anObject dynamicInstVarAt: (dynamic at: i))) on: stream.
		stream lf.
	].
	isRcBag
		ifTrue: [ |aBag |
			aBag := anObject _asIdentityBag.
			1 to: indexedSize do: [:i | 
				i printOn: stream.
				stream tab.
				self _print: (self oopOf: (aBag _at: i )) on: stream.
				stream lf]]
		ifFalse: [
			1 to: indexedSize do: [:i | 
				i printOn: stream.
				stream tab.
				self _print: (self oopOf: (anObject _primitiveAt: i + namedSize)) on: stream.
				stream lf] ].

	(string := anObject printString) size > 5000 ifTrue: [string := (string copyFrom: 1 to: 5000) , '...'].
	stream nextPutAll: string.
	^self _encodeString: stream contents.
! !
!JadeServer64bit3x categoriesFor: #inspect:!Inspector!public!Transcript! !

!Object methodsFor!

isJadeInspector

	^false! !
!Object categoriesFor: #isJadeInspector!public!testing! !

"End of package definition"!

