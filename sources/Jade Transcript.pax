| package |
package := Package name: 'Jade Transcript'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '0.057'.


package classNames
	add: #AllSessionsPresenter;
	add: #JadeTranscript;
	add: #MySessionPresenter;
	add: #StoneInfoPresenter;
	add: #TranscriptPresenter;
	yourself.

package methodNames
	add: #JadeServer32bit -> #addSessionWithId:toStream:;
	add: #JadeServer64bit -> #addSessionWithId:toStream:;
	add: #JadeServer64bit -> #metacelloConfigurations;
	add: #JadeServer64bit -> #streamType;
	add: #JadeServer64bit -> #stringType;
	add: #JadeServer64bit33 -> #gemLogPath;
	add: #JadeServer64bit34 -> #gemLogPath;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Boolean\Dolphin Boolean Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Radio\Dolphin Radio Buttons';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter';
	add: '..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters';
	add: '..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models';
	add: 'GemStone Session';
	add: 'Jade Autocompletation';
	add: 'Jade UI Base';
	yourself).

package!

"Class Definitions"!

JadePresenterA subclass: #AllSessionsPresenter
	instanceVariableNames: 'autoUpdatePresenter autoUpdateProcess sessionListPresenter sessionListErrorPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #MySessionPresenter
	instanceVariableNames: 'configurationReportPresenter gciSessionIdPresenter gciVersionPresenter gemHostPresenter gemTypePresenter logPathPresenter netPortPresenter netTaskPresenter stoneHostPresenter stoneNamePresenter stoneSerialPresenter stoneSessionIDPresenter userIDPresenter versionReportPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #StoneInfoPresenter
	instanceVariableNames: 'configurationReportPresenter streamTypePresenter stringTypePresenter versionReportPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CodeSourcePresenter subclass: #TranscriptPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeWorkspace subclass: #JadeTranscript
	instanceVariableNames: 'allSessionsPresenter historyPresenter mySessionPresenter stoneInfoPresenter toolbarPresenter transcriptPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!JadeServer32bit methodsFor!

addSessionWithId: anInteger toStream: aStream

	Exception
		category: nil
		number: nil
		do: [:ex :cat :num :args | '?????'].
	super
		addSessionWithId: anInteger 
		toStream: aStream.
! !
!JadeServer32bit categoriesFor: #addSessionWithId:toStream:!public!Sessions! !

!JadeServer64bit methodsFor!

addSessionWithId: anInteger toStream: aStream

	[
		super
			addSessionWithId: anInteger
			toStream: aStream.
	] on: Error do: [:ex | 
		ex resume: '?????'.
	].
!

metacelloConfigurations

	| list |
	list := Array new.
	GsSession currentSession symbolList do: [:eachSymbolList | 
		eachSymbolList do: [:eachGlobal | 
			(eachGlobal isBehavior and: [
			(eachGlobal class includesSelector: #'isMetacelloConfig') and: [
			eachGlobal isMetacelloConfig]]) ifTrue: [list add: eachGlobal].
		].
	].
	^list
!

streamType

	| isLegacy type |
	type := Globals at: #'PositionableStream_position' ifAbsent: [#'Legacy'].
	(Globals includesKey: #'PositionableStreamLegacy') ifFalse: [^type].
	isLegacy := PositionableStream isLegacyStreamImplementation.
	(type = #'Legacy') == isLegacy ifTrue: [^type].
	self error: 'Inconsistent PositionableStream configuration'.
!

stringType

	^(Globals at: #StringConfiguration ifAbsent: [String]) name
! !
!JadeServer64bit categoriesFor: #addSessionWithId:toStream:!public!Sessions! !
!JadeServer64bit categoriesFor: #metacelloConfigurations!public!Transcript! !
!JadeServer64bit categoriesFor: #streamType!public!Transcript! !
!JadeServer64bit categoriesFor: #stringType!public!Transcript! !

!JadeServer64bit33 methodsFor!

gemLogPath

	^System gemLogPath
! !
!JadeServer64bit33 categoriesFor: #gemLogPath!public!Transcript! !

!JadeServer64bit34 methodsFor!

gemLogPath

	^System gemLogPath
! !
!JadeServer64bit34 categoriesFor: #gemLogPath!public!Transcript! !

"End of package definition"!

