| package |
package := Package name: 'Jade Test Browser'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '0.022'.


package classNames
	add: #GsTestMethod;
	add: #JadeSUnitAbstractPresenter;
	add: #JadeSUnitBrowser;
	add: #JadeSUnitInClassPresenter;
	add: #JadeSUnitPresenter;
	add: #JadeTestResult;
	yourself.

package methodNames
	add: #JadeServer -> #debugTestNamed:of:;
	add: #JadeServer -> #getPackagesNamesWithTestClasses;
	add: #JadeServer -> #getTestCaseClassesNamesOf:;
	add: #JadeServer -> #getTestMethodsNamesOf:;
	add: #JadeServer -> #runTestNamed:in:;
	add: #JadeToolsToolBarPresenter -> #browseTests;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\Core\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls'
	'..\Core\Object Arts\Dolphin\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Legacy Date & Time'
	'..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Message Box'
	'..\Core\Object Arts\Dolphin\MVP\Deprecated\Dolphin MVP (Deprecated)'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters'
	'..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models'
	'GemStone Session'
	'Jade UI Base'
	'..\Core\Contributions\Odellsoft\SUnitBrowser\SUnitBrowser').

package!

"Class Definitions"!

Object subclass: #GsTestMethod
	instanceVariableNames: 'className methodName result'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #JadeTestResult
	instanceVariableNames: 'failures errors passed summary'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenter subclass: #JadeSUnitAbstractPresenter
	instanceVariableNames: 'testCasesPresenter textResultPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeSUnitAbstractPresenter subclass: #JadeSUnitInClassPresenter
	instanceVariableNames: 'testClassName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeSUnitAbstractPresenter subclass: #JadeSUnitPresenter
	instanceVariableNames: 'packagesPresenter testClassesPresenter status testCounter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeShell subclass: #JadeSUnitBrowser
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!JadeServer methodsFor!

debugTestNamed: testName of: testCaseClassName
	"Open a Debugger for the TestCase class named <testCaseClassName> in the test named <testName>"

	^(self objectNamed: (self _decodeString: testCaseClassName)) debug: (self _decodeString: testName) asSymbol!

getPackagesNamesWithTestClasses
	"Answer a collection with all package names that contain at least one Test class (subclass of TestCase)"

	| comma packageOrganizer packageOrganizerClass packagesNames stream testCaseClass |
	testCaseClass := self objectInBaseNamed: #'TestCase'.
	testCaseClass isNil ifTrue: [^''].
	packageOrganizerClass := self objectInBaseNamed: #'PackageOrganizer'.
	packageOrganizerClass isNil ifTrue: [^'<All>'].
	packageOrganizer := packageOrganizerClass default.
	packagesNames := Set new.
	testCaseClass allSubclasses do: [:each | 
		| package |
		package := packageOrganizer packageOfClass: each ifNone: [nil].
		package notNil ifTrue: [packagesNames add: package packageName].
	].
	comma := ''.
	stream := self _writeStreamOnString.
	packagesNames asSortedCollection do: [:each | stream nextPutAll: comma; nextPutAll: each. comma := ','].
	^self _encodeString: stream contents!

getTestCaseClassesNamesOf: packageName
	"Answer a collection with all test classes of the GemStone/S package named <packageNamed>"

	| classes comma stream string |
	string := self _decodeString: packageName.
	string isEmpty ifTrue: [^''].
	classes := (self objectInBaseNamed: #'TestCase') allSubclasses.
	string = '<All>' ifFalse: [
		| packageInfo packageOrganizer |
		packageOrganizer := (self objectInBaseNamed: #'PackageOrganizer') default.
		packageInfo := packageOrganizer packageNamed: string ifAbsent: [^''].
		packageInfo classes isEmpty ifTrue: [^''].
		classes := packageInfo classes select: [:each | classes includes: each].
	].
	stream := self _writeStreamOnString.
	comma := ''.
	classes do: [:each | stream nextPutAll: comma; nextPutAll: each name. comma := ','].
	^self _encodeString: stream contents!

getTestMethodsNamesOf: classNamed 
	"Answer a collection with all test selectors of the GemStone/S class named <classNamed>"

	| class comma stream testSelectors gsClass |
	stream := self _writeStreamOnString.
	gsClass := self objectNamed: (self _decodeString: classNamed).
	gsClass isNil ifTrue: [^''].
	(class := self objectNamed: #'TestCase') isNil ifTrue: [^''].
	(gsClass isSubclassOf: class) ifFalse: [^''].
	testSelectors :=  gsClass testSelectors asSortedCollection.
	testSelectors isEmpty ifTrue: [^''].
	comma := ''.
	 testSelectors do: [:each | stream nextPutAll: comma; nextPutAll: each. comma := ','].
	^self _encodeString: stream contents!

runTestNamed: testName in: gsClass
	"The receiver run the test named <testName> of GemStone/S class named <gsClass>"
	| testResult |

	testResult := (self objectNamed: (self _decodeString: gsClass)) run: (self _decodeString: testName) asSymbol.

	^self _encodeString: testResult errorCount printString, ',' ,testResult failureCount printString, ',', testResult passedCount printString! !
!JadeServer categoriesFor: #debugTestNamed:of:!public!Test Browser! !
!JadeServer categoriesFor: #getPackagesNamesWithTestClasses!public!Test Browser! !
!JadeServer categoriesFor: #getTestCaseClassesNamesOf:!public!Test Browser! !
!JadeServer categoriesFor: #getTestMethodsNamesOf:!public!Test Browser! !
!JadeServer categoriesFor: #runTestNamed:in:!public!Test Browser! !

!JadeToolsToolBarPresenter methodsFor!

browseTests

	JadeSUnitBrowser showOnSession: gciSession.! !
!JadeToolsToolBarPresenter categoriesFor: #browseTests!public! !

"End of package definition"!

